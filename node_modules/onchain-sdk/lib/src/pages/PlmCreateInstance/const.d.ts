/// <reference types="react" />
import { PlmFormForwardRefProps } from '../../components/PlmForm';
import { APP } from '../../typings';
import { BasicsAttribute } from '../../utils/attribute';
import { ForbiddenTime } from '../../utils/project';
import { ProjectPublicAttribute } from '../../utils/project/const';
import moment from 'moment';
export declare const CONCAT_SYMBOL = "CONCAT_SYMBOL";
export declare const ScheduleDateApiCode = "ScheduleStartDateCONCAT_SYMBOLScheduleEndDate";
export type FromRef<T = undefined> = React.MutableRefObject<PlmFormForwardRefProps | T>;
export type CalenderRef<T = undefined> = React.MutableRefObject<PlmProject.GanttCalendarInstance<moment.Moment> | T>;
export type ExtraAssociationParams = {
    calendar?: CalenderRef;
    /** 项目实例 （创建项目时不会有实例，请注意联动函数需要的依赖） */
    instance?: Partial<APP.ProjectInstance>;
    ownerType?: string;
    callbacks?: {
        [s: string]: Function;
    };
};
interface Association<T = string> {
    /** 触发更新的属性 */
    self: T;
    /** 需要联动更新的属性 */
    target: T;
    /** 依赖的属性 */
    dep?: T[];
    ass: (this: Association, from: FromRef, updatedFormItem: Object, attrMap: Partial<Association<Attr>>, extra?: ExtraAssociationParams) => void;
    /** 谁在更新（self | target） */
    update?: T;
    /** 是否方向关联 */
    isDirectionTracking?: boolean;
}
type Attr = BasicsAttribute;
/**
 * @description
 * @date 2022-11-21 19:37:34
 * @export
 * @param {Association[]} ass 联动配置
 * @returns {*}
 */
export declare function createAssociation(ass: Association[]): {
    associationUpdate: (from: FromRef<undefined>, attrs: Attr[], updatedFormItem: Object, extra?: ExtraAssociationParams) => BasicsAttribute<string> | undefined;
    associationUpdateStatus: (value: boolean) => void;
} & [(from: FromRef<undefined>, attrs: Attr[], updatedFormItem: Object, extra?: ExtraAssociationParams) => BasicsAttribute<string> | undefined, (value: boolean) => void];
/** 获取给服务端的额外属性和属性值 */
export declare function getExtraParameter(params: {
    instanceInfo: APP.instanceInfoType;
    isProjectTemplate: boolean;
    ownerType: string;
}): {
    extraValue: Record<string, any>;
    extraAttrs: BasicsAttribute<string>[];
};
export declare function getUpdateItemValue(updatedFormItem: object): any;
/** 公共 association 回调 */
export declare function publicAssociationCallback(params: {
    setIsProjectTemplate: Function;
    setOwnerType: Function;
}): {
    IsTemplate: (isTemplate: boolean) => void;
};
/** 属性联动 */
export declare const association: Parameters<typeof createAssociation>[0];
/**
 * @description 联动更新
 * @date 2022-11-21 19:34:50
 * @param {FromRef} form 表单的ref
 * @param {Attr[]} attrs 表单属性
 * @param {Object} updatedFormItem 当前表单更新数据后的 item
 * @returns {*}
 */
export declare const associationUpdate: (from: FromRef<undefined>, attrs: Attr[], updatedFormItem: Object, extra?: ExtraAssociationParams) => BasicsAttribute<string> | undefined, associationUpdateStatus: (value: boolean) => void;
export declare function resetConcatId(): void;
/**
 * @description 将开始时间和结束时间合并成 RangePicker (里程碑没开始时间所以不合并)
 * @date 2022-11-21 17:38:14
 * @export
 * @param {Attr[]} attrs form表单需要展示的属性
 * @param {boolean} [isMilestone] 是否是里程碑
 * @returns {*}
 */
export declare function concatStartEnd(attrs: Attr[], isMilestone?: boolean, calendar?: CalenderRef, extraForbiddenTime?: ForbiddenTime | ForbiddenTime[]): Attr[];
export declare function attributeInterchange(attrs: Attr[], { isRun, target, data, }: {
    isRun: boolean;
    target: ProjectPublicAttribute;
    data: ProjectPublicAttribute;
}): void;
export declare function processingProjectManagerAttr(attrs: Attr[], isRun: boolean): void;
/**
 * @description 默认禁止输入
 * @date 2022-11-24 12:55:28
 * @export
 * @param {Attr[]} attrs form表单需要展示的属性
 * @param {string[]} codes 要禁止属性的 apicode
 */
export declare function defaultDisable(attrs: Attr[], codes: string[]): void;
type FormRes = Attr;
/**
 * @description 处理合并过的开始时间和结束时间的结果
 * @date 2022-11-21 17:37:39
 * @export
 * @param {FormRes} formRes 表单获取到的结果
 */
export declare function handleStartEnd(formRes: FormRes, lastCalendar: React.MutableRefObject<PlmProject.GanttCalendarInstance<moment.Moment> | undefined>): void;
export declare function saveHandleStartEnd(pageInst: APP.ProjectInstance, attr: BasicsAttribute, save: Record<string, any>): moment.Moment[];
/**
 * @description 根据类型的apicode处理
 * @date 2022-11-24 18:25:25
 * @export
 * @param {string} objectId 项目类型id
 * @param {any[]} projectMap 项目类型央视数组
 * @param {any[]} formItem 需要处理的 formItem 的属性集合
 * @returns {*}
 */
export declare function individuation(objectId: string, projectMap: any[], formItem: any[]): () => BasicsAttribute<ProjectPublicAttribute>[];
export {};
