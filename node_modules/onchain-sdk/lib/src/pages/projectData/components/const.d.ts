/// <reference types="react" />
import { PlmFormForwardRefProps } from '../../../components/PlmForm';
import { BasicsAttribute } from '../../../utils/attribute';
import { SelectProps } from 'antd';
export declare function getTaskOwnerOptions(instance: Record<string, any>, userMap: Map<string, any>, specifyId?: string): Promise<{
    process: any;
    start: string;
    end: string;
    options: any[];
    id: string;
}>;
export declare function getCompatibleInstance(): {
    projectGeneral: {};
    project: {
        columnApiCodeIdMap: {};
    };
    attributes: {};
};
export declare function getColumnsMap(originTableColumns: Record<string, any>[]): any;
export interface OnOpenUtilization {
    (params: {
        instance: Record<string, any>;
        ids?: string[];
        selectId?: string;
    }): void;
}
export declare function useUserTagsForm<T = string>(params: {
    visible: boolean;
    productId?: string;
    tool?: {
        selectTargetName?: string;
        required?: boolean;
    };
    radio?: {
        ref: React.MutableRefObject<PlmFormForwardRefProps | undefined>;
        name: string;
    };
    onChange?: (value: T) => void;
    selectProps?: SelectProps;
    filter?: string[];
}): {
    value: string;
    name: string | undefined;
    loading: boolean;
    options: {
        label: string;
        value: string;
    }[];
    content: {
        formatFormProps?: ((props: any, record: any, columnApicode: string) => any & ({
            type: "Input";
            cannotread?: string | undefined;
            middleware?: any;
            isbomtag?: boolean | undefined;
            props?: Record<string, any> | import("antd").InputProps | undefined;
        } | {
            type: "Select";
            middleware?: any;
            cannotread?: string | undefined;
            props?: import("../../../components/PlmSelect").PlmSelectProps | undefined;
        } | {
            type: "PopupSelect";
            cannotread?: string | undefined;
            middleware?: any;
            props?: any;
        } | {
            type: "SearchSelect";
            middleware?: any;
            cannotread?: string | undefined;
            props?: any;
        } | {
            type: "Checkbox.Group";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd/lib/checkbox").CheckboxGroupProps | undefined;
        } | {
            type: "Checkbox";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd").CheckboxProps | undefined;
        } | {
            type: "Input.TextArea";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd/lib/input").TextAreaProps | undefined;
        } | {
            type: "Input.Password";
            cannotread?: string | undefined;
            props?: any;
            middleware?: any;
        } | {
            type: "Date";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd").DatePickerProps | undefined;
        } | {
            type: "DatePicker.RangePicker";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd/lib/date-picker/generatePicker").RangePickerProps<any> | undefined;
        } | {
            type: "TimePicker.RangePicker";
            cannotread?: string | undefined;
            middleware?: any;
            props?: any;
        } | {
            type: "Image";
            cannotread?: string | undefined;
            middleware?: any;
            props: {};
        } | {
            type: "File";
            cannotread?: string | undefined;
            middleware?: any;
            props: {};
        } | {
            type: "Switch";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd").SwitchProps | undefined;
        } | {
            type: "Number";
            cannotread?: string | undefined;
            props?: import("antd").InputNumberProps<import("@rc-component/mini-decimal").ValueType> | undefined;
            middleware?: any;
        } | {
            type: "Cascader";
            cannotread?: string | undefined;
            middleware?: any;
            props?: any;
        } | {
            type: "TreeSelect";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd").TreeSelectProps<any, import("rc-tree-select/lib/TreeSelect").DefaultOptionType> | undefined;
        } | {
            type: "Radio";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd").RadioProps | undefined;
        } | {
            type: "Radio.Group";
            cannotread?: string | undefined;
            middleware?: any;
            props?: import("antd").RadioGroupProps | undefined;
        } | {
            type: "Slider";
            middleware?: any;
            cannotread?: string | undefined;
            props?: import("antd").SliderSingleProps | undefined;
        } | {
            type: "dynamicTable";
            middleware?: any;
            cannotread?: string | undefined;
            props?: any;
        } | {
            type: "Markdown";
            cannotread?: string | undefined;
            middleware?: any;
            props?: any;
        } | {
            type: "InputFile";
            cannotread?: string | undefined;
            middleware?: any;
            props?: any;
        } | {
            type: "DocumentFile";
            middleware?: any;
            cannotread?: string | undefined;
            props?: any;
        } | {
            type: "SelectTransfer";
            middleware?: any;
            cannotread?: string | undefined;
            props?: (import("../../../components/PlmSelect").PlmSelectProps & {
                attr: BasicsAttribute<string>;
                allListOptions: Record<string, any[]>;
                popoverTransfer: Omit<import("../../../components/PlmPopoverTransfer").PlmPopoverTransferProps, "attr" | "allListOptions">;
            }) | undefined;
        } | {
            type: "CompositeForm";
            middleware?: any;
            cannotread?: string | undefined;
            props?: any;
        } | {
            type: "Title";
            middleware?: any;
            cannotread?: string | undefined;
            props?: any;
        })) | undefined;
    } & ({
        type: "Input";
        cannotread?: string | undefined;
        middleware?: any;
        isbomtag?: boolean | undefined;
        props?: Record<string, any> | import("antd").InputProps | undefined;
    } | {
        type: "Select";
        middleware?: any;
        cannotread?: string | undefined;
        props?: import("../../../components/PlmSelect").PlmSelectProps | undefined;
    } | {
        type: "PopupSelect";
        cannotread?: string | undefined;
        middleware?: any;
        props?: any;
    } | {
        type: "SearchSelect";
        middleware?: any;
        cannotread?: string | undefined;
        props?: any;
    } | {
        type: "Checkbox.Group";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd/lib/checkbox").CheckboxGroupProps | undefined;
    } | {
        type: "Checkbox";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd").CheckboxProps | undefined;
    } | {
        type: "Input.TextArea";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd/lib/input").TextAreaProps | undefined;
    } | {
        type: "Input.Password";
        cannotread?: string | undefined;
        props?: any;
        middleware?: any;
    } | {
        type: "Date";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd").DatePickerProps | undefined;
    } | {
        type: "DatePicker.RangePicker";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd/lib/date-picker/generatePicker").RangePickerProps<any> | undefined;
    } | {
        type: "TimePicker.RangePicker";
        cannotread?: string | undefined;
        middleware?: any;
        props?: any;
    } | {
        type: "Image";
        cannotread?: string | undefined;
        middleware?: any;
        props: {};
    } | {
        type: "File";
        cannotread?: string | undefined;
        middleware?: any;
        props: {};
    } | {
        type: "Switch";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd").SwitchProps | undefined;
    } | {
        type: "Number";
        cannotread?: string | undefined;
        props?: import("antd").InputNumberProps<import("@rc-component/mini-decimal").ValueType> | undefined;
        middleware?: any;
    } | {
        type: "Cascader";
        cannotread?: string | undefined;
        middleware?: any;
        props?: any;
    } | {
        type: "TreeSelect";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd").TreeSelectProps<any, import("rc-tree-select/lib/TreeSelect").DefaultOptionType> | undefined;
    } | {
        type: "Radio";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd").RadioProps | undefined;
    } | {
        type: "Radio.Group";
        cannotread?: string | undefined;
        middleware?: any;
        props?: import("antd").RadioGroupProps | undefined;
    } | {
        type: "Slider";
        middleware?: any;
        cannotread?: string | undefined;
        props?: import("antd").SliderSingleProps | undefined;
    } | {
        type: "dynamicTable";
        middleware?: any;
        cannotread?: string | undefined;
        props?: any;
    } | {
        type: "Markdown";
        cannotread?: string | undefined;
        middleware?: any;
        props?: any;
    } | {
        type: "InputFile";
        cannotread?: string | undefined;
        middleware?: any;
        props?: any;
    } | {
        type: "DocumentFile";
        middleware?: any;
        cannotread?: string | undefined;
        props?: any;
    } | {
        type: "SelectTransfer";
        middleware?: any;
        cannotread?: string | undefined;
        props?: (import("../../../components/PlmSelect").PlmSelectProps & {
            attr: BasicsAttribute<string>;
            allListOptions: Record<string, any[]>;
            popoverTransfer: Omit<import("../../../components/PlmPopoverTransfer").PlmPopoverTransferProps, "attr" | "allListOptions">;
        }) | undefined;
    } | {
        type: "CompositeForm";
        middleware?: any;
        cannotread?: string | undefined;
        props?: any;
    } | {
        type: "Title";
        middleware?: any;
        cannotread?: string | undefined;
        props?: any;
    });
    rules: {
        required: true;
        message: string;
    }[];
};
