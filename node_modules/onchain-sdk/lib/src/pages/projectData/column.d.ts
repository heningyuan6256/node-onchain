import { APP } from '../../typings';
import { BasicsAttribute } from '../../utils/attribute';
import { ColumnRenderOption } from '../../utils/columns';
import { PlmLinkInstanceProp } from '../../components/PlmLinkInstance';
import { ProjectPublicAttribute } from '../../utils/project/const';
import { contentProps } from '../../components/PlmFormItem';
export declare function colNameRender<T>({ idName, className, instanceInfo, initialState, isHideIcon, linkInstanceHighLight, getLinkData, isDoubleClick, isProjectChange, linkInstanceProps, }: {
    /** 顶层实例 */
    instanceInfo: APP.ProjectInstance<T>;
    className?: string;
    initialState?: APP.InitialState;
    /** 是否隐藏图标 */
    isHideIcon?: boolean;
    /** 获取链接在html中渲染内容 */
    getLinkData?: (record: any, key: string) => any;
    /** 搜索高亮显示 */
    linkInstanceHighLight?: {
        current: Record<string, string[]>;
    };
    /** id 属性的名称 */
    idName?: string;
    /** 是否开启双击 */
    isDoubleClick?: boolean;
    isProjectChange?: boolean;
    linkInstanceProps?: Partial<PlmLinkInstanceProp>;
}): ColumnRenderOption;
/**
 * @description 渲染 健康状态
 * @export
 * @template T
 * @param {APP.ProjectInstance<T>} instanceInfo
 * @param {Record<string, any>} columnsApicodeIdMap 当前table的 apicode id 映射
 * @returns {*}  {ColumnRenderOption}
 */
export declare function colHealthStatusRender<T = ProjectPublicAttribute>(instanceInfo: APP.ProjectInstance<T>, columnsApicodeIdMap: Record<string, any>): ColumnRenderOption;
export declare function colSuffixRender(params: {
    attrCodes: string[];
    value: (val: any) => any;
    highLight?: {
        current: Record<string, string[]>;
    };
}): ColumnRenderOption;
export declare function getHealthTitle(title?: string, type?: 'health' | 'state'): JSX.Element;
export declare function colOwnerRender({ transferOwnerAttr, highLight, }: {
    transferOwnerAttr?: BasicsAttribute;
    highLight?: {
        current: Record<string, string[]>;
    };
}): ColumnRenderOption;
export declare function colStatusRender(params: {
    highLight?: {
        current: Record<string, string[]>;
    };
}): ColumnRenderOption;
export declare function colCurrentWFNodeRender(params: {
    highLight?: {
        current: Record<string, string[]>;
    };
}): ColumnRenderOption;
export declare function getTaskOwnerColRender({ dataIndex, formItemProps, getHighLight, }: {
    dataIndex: string;
    formItemProps: contentProps;
    getHighLight?: () => string[];
}): (data: string, record: Record<string, any>) => JSX.Element;
