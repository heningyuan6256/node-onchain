import { PlmTask } from '../../../components/PlmGantt/utils/type';
import { singleColumnType } from '../../../components/PlmTable';
import { APP } from '../../../typings';
import { BasicsAttribute } from '../../../utils/attribute';
export declare enum ProjectCostAttr {
    /** 科目编号 */ AccountNumber = "AccountNumber",
    /** 科目名称 */ AccountName = "AccountName",
    /** 科目描述 */ AccountDescription = "AccountDescription",
    /** 预算费用 */ BudgetCost = "BudgetCost",
    /** 实际费用 */ ActualCost = "ActualCost",
    /** 费用偏差 */ VarianceCost = "VarianceCost",
    /** 科目状态 */ AccountStatus = "AccountStatus"
}
/**
 * @description 汇总指定属性值
 * @date 2023-02-02 16:22:26
 * @export
 * @template T
 * @param {({ data: T[]; keys: string[]; isCalculate: (item: T) => 1 | 2 | 3, flatAttr?: string })} params
 * @returns {*}
 */
export declare function getSummary<T = Record<string, any>>(params: {
    data: T[];
    keys: string[];
    map: Record<string, string>;
    /** 1 子集预算汇总 4: 根节点费用 */
    isCalculate: (item: T) => 1 | 2 | 3 | 4;
    flatAttr?: string;
}): {
    oldVal: {
        taskSum: Record<string, number>;
        parentTaskSum: Record<string, number>;
        phaseSum: Record<string, number>;
        projectSum: Record<string, number>;
    };
    newVal: {
        taskSum: Record<string, number>;
        phaseSum: Record<string, number>;
        parentTaskSum: Record<string, number>;
        projectSum: Record<string, number>;
    };
};
interface ApiCodeProps {
    budget: string;
    actual: string;
    variance: string;
}
/**
 * @description 获取汇总数据
 * @date 2023-02-02 16:02:11
 * @export
 * @param {ReturnType<typeof getSummary>} { taskSum, phaseSum, projectSum }
 * @param {Record<string, string>} map
 * @returns {*}
 */
export declare function getSummaryDataList(params: {
    summary: ReturnType<typeof getSummary>;
    titleApiCode: string;
    map: Record<string, string>;
    apiCode: ApiCodeProps;
    allBudget?: number;
}): ({
    newVal: any;
    rid: string;
    rowId: string;
    id: string;
    insId: string;
    isCustom: boolean;
} | {
    newVal: any;
    rid: string;
    rowId: string;
    id: string;
    insId: string;
    isCustom: boolean;
    isVariance: boolean;
})[];
export declare function formatNumber(value: string | number, precision?: number): number;
export declare function subtraction(value: number, val: number): number;
export declare const failText: {
    parentBudgetEmpty: string;
    budgetEmpty: string;
    actualPassBudget: string;
    sonBudgetPassParent: string;
    parentBudgetSmallSon: string;
};
export declare const toUpdateServerList: ({ pageInstance, list, idName, rootId, }: {
    list: any[];
    pageInstance: Record<string, any>;
    rootId: string;
    idName?: string | undefined;
}) => {
    id: any;
    pid: any;
    projectId: string;
    isUpdatePrePost: boolean;
    isRoot: boolean;
    insAttrs: {
        value: unknown;
    }[];
}[];
/** 子集预算总和是否大于父级 */
export declare function isGreaterParent({ isSubject, instanceInfo, parentConst, isShowErrorInfo, }: {
    isSubject?: boolean;
    instanceInfo: Record<string, any>;
    isShowErrorInfo?: boolean;
    parentConst: {
        selfValue: number;
        sonValue: number;
    };
}): boolean;
export declare class CostPersonalization {
    personality: APP.Personality;
    /** 1:允许大于预算费用  2: 不允许大于预算费用 */
    greaterThan: '1' | '2';
    overPercentage: number | undefined | null;
    constructor(personality: APP.Personality);
    /** 是否是 实际可以大于预算的规则  */
    isActualGreaterBudgetRule(): boolean;
    /** 是否是 实际要小于等于预算的规则 */
    isActualLessBudgetRule(): boolean;
    /** 是否要限制实际费用 */
    isLimitActual(): boolean;
    /** 获取能超过的最大预算费用 */
    getExceedMaxBudget(budget: number | string): number;
}
/** 实际费用是否大于预算费用 */
export declare function isGreaterBudget({ budgetKey, col, record, isSubject, instanceInfo, personality, isShowErrorInfo, }: {
    budgetKey: string;
    isSubject?: boolean;
    col: singleColumnType;
    record: Record<string, any>;
    instanceInfo: Record<string, any>;
    personality: APP.Personality;
    isShowErrorInfo?: boolean;
}): boolean;
/** 实际费用是否超过了预算费用 */
export declare function attributesEditIsGreaterBudget(params: {
    updateAttrs: BasicsAttribute[];
    instanceInfo: APP.instanceInfoType;
    attrAfterEdit: Map<string, {
        isUpdate: boolean;
        value: any;
    } | undefined>;
    personality: APP.Personality;
}): boolean;
/** 是否是要处理编辑费用时的判断 */
export declare const isCostEditing: ({ col, record, rowKey, rootNode, map, pageInstance, getTreeRelation, personality, parentTask, isShowErrorInfo, }: {
    pageInstance: APP.ProjectInstance;
    getTreeRelation: (id: string) => PlmProject.Relation;
    col: singleColumnType;
    rootNode: Record<string, any>;
    rowKey: string;
    record: Record<string, any>;
    map: Record<string, string>;
    personality: APP.Personality;
    parentTask?: PlmTask | undefined;
    isShowErrorInfo?: boolean | undefined;
}) => boolean;
/** 更新项目费用行类数据 */
export declare const costUpdate: ({ col, record, map, pageInstance, rowKey, personality, getRel, fareAligned, onUpdate, }: {
    /** 当前编辑后的新数据 */
    record: Record<string, any>;
    /** 当前编辑的列头 */
    col: singleColumnType;
    /** [apicode] : [id] 映射表 */
    map: Record<string, any>;
    /** 页面实例（根实例） */
    pageInstance: APP.ProjectInstance;
    /** 获取数据唯一标识的 key */
    rowKey: string;
    personality: APP.Personality;
    /** 获取树节点位置的函数 */
    getRel: () => PlmProject.Relation;
    /** 数据更新 */
    onUpdate?: (() => void) | undefined;
    /** 数据更新后的对齐回调，用来做费用对齐 */
    fareAligned?: ((key: string) => void) | undefined;
}) => boolean | undefined;
export {};
