import { HomeTabKey } from '../../../components/PlmHomeLayout/utils';
import { ButtonConfig } from '../../../components/PlmTabToolBar/types';
import { BadgeButton } from './utils';
import { InstanceObjectMap } from '../../../components/PlmTabTemplate/create-instance/types';
/** 待执行任务按钮 */
export declare const getPendingTaskButton: (instance?: any) => Omit<ButtonConfig, "id">[];
/** 我执行中的任务 */
export declare const getTaskBeConfirmedButton: ({ workReportObject, instance, }: {
    workReportObject?: {
        apicode: string;
        id: string;
        name: string;
        value: string;
        label: string;
    } | undefined;
    instance?: any;
}) => Omit<ButtonConfig, "id">[];
/** 待接受项目按钮 */
export declare const getPendingAcceptProjectButton: (instance?: any) => Omit<ButtonConfig, "id">[];
export declare const getApprovedWorkReportButton: (instance?: any) => Omit<ButtonConfig, "id">[];
export declare const getConfirmTaskButton: (instance?: any) => Omit<ButtonConfig, "id">[];
export declare const useMyProjectBadgeButton: ({ tabKey, defaultSelect, loading, updateButton, }: {
    tabKey: HomeTabKey;
    defaultSelect?: BadgeButton | undefined;
    loading?: boolean | undefined;
    updateButton: (button: Omit<ButtonConfig, 'id'>[]) => void;
}) => {
    button: Omit<ButtonConfig, "id">[];
    toggle(value: BadgeButton, callback: (isActivate: boolean) => void): void;
    getSelectConditions(): "" | BadgeButton;
    activeStatus: {
        not_start: boolean;
        underway: boolean;
        delay: boolean;
        changing: boolean;
        failure: boolean;
        pause_cancel: boolean;
    };
    updatedCount(): Promise<void>;
};
export declare const useExecutingTaskBadgeButton: ({ tabKey, defaultSelect, loading, updateButton, }: {
    tabKey: HomeTabKey;
    defaultSelect?: BadgeButton | undefined;
    loading?: boolean | undefined;
    updateButton: (button: Omit<ButtonConfig, 'id'>[]) => void;
}) => {
    button: Omit<ButtonConfig, "id">[];
    toggle(value: BadgeButton, callback: (isActivate: boolean) => void): void;
    getSelectConditions(): "" | BadgeButton;
    activeStatus: {
        carry_out: boolean;
        deferred_closure: boolean;
    };
    updatedCount(): Promise<void>;
};
export declare const useAwaitExeTaskBadgeButton: ({ tabKey, defaultSelect, loading, updateButton, }: {
    tabKey: HomeTabKey;
    defaultSelect?: BadgeButton | undefined;
    loading?: boolean | undefined;
    updateButton: (button: Omit<ButtonConfig, 'id'>[]) => void;
}) => {
    button: Omit<ButtonConfig, "id">[];
    toggle(value: BadgeButton, callback: (isActivate: boolean) => void): void;
    getSelectConditions(): "" | BadgeButton;
    activeStatus: {
        await_carry_out: boolean;
        deferred_carry_out: boolean;
    };
    updatedCount(): Promise<void>;
};
