import { GanttStatic } from 'dhtmlx-gantt';
import React from 'react';
import { PlmTask } from '../utils/type';
type TaskId = PlmProject.Task['id'];
export declare enum ButtonCode {
    /** 新建 */ Create = "tab_create",
    /** 添加 */ Add = "tab_add",
    /** 删除 */ Delete = "tab_delete",
    /** 粘贴 */ Paste = "tab_paste",
    /** 上移 */ Up = "tab_up",
    /** 下移 */ Down = "tab_down",
    /** 升级 */ Upgrade = "tab_upgrade",
    /** 降级 */ Demote = "tab_demote",
    /** 展示开全部父亲节点 */ OpenAll = "tab_openmode",
    /** 显示列 */ Column = "tab_column",
    /** 导出 */ Export = "tab_export",
    /** 保存 */ Save = "tab_save",
    /** 取消 */ Cancel = "tab_cancel",
    /** 上一步 */ Back = "tab_back",
    /** 下一步 */ Next = "tab_next",
    /** 甘特图 */ GanttChart = "tab_gantt_chart",
    /** 重置 */ Reset = "tab_reset",
    /** 编辑行 */ EditRow = "tab_edit_row"
}
export interface OperationBarProps {
    ganttInst?: GanttStatic;
    tableNamespace?: string;
    tableHandle: {
        data: PlmTask[];
        selectedKeys: TaskId[];
        setSelectedKeys?: (string: []) => void;
        /**
         * @description 更新数据
         * @date 2022-12-29 09:24:31
         * @param {boolean} [value] 是否更新执行初始化方法，false时只会简单的更新 gantt 和 table
         * @param {any[]} [data] 新列表数据
         */
        onUpdate: (params: PlmProject.UpdateTableGanttDataParams) => void;
    };
    expandedAllRows: {
        expandedRowKeys: TaskId[];
        allKey: TaskId[];
        onOpenRow: (keys: string[]) => void;
    };
    checkButton: () => void;
}
export type BtnState = Record<ButtonCode, boolean>;
export type SetBtnState = (value: Partial<BtnState>, isInit?: 'operation' | 'save' | 'steps' | 'all') => void;
export declare const useOperaBarButtonState: () => [BtnState, SetBtnState];
declare const OperationBar: React.FC<OperationBarProps>;
export default OperationBar;
