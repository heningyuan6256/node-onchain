import { APP } from '../../../typings';
import { DateType, ProjectGeneral } from '../../../utils/project';
import { GanttStatic } from 'dhtmlx-gantt';
import { Moment } from 'moment';
import { DataUpdateManager } from '../const';
import { PlanAttr } from '../utils/plan-attr';
import { PlmTask, Rel, TableGanttContextProps } from '../utils/type';
type TableData = any;
type TaskId = PlmProject.Task['id'];
/** 通过id 获取任务关系 */
export declare function getTaskRelationBasics(context: TableGanttContextProps, gantt: GanttStatic, taskId: TaskId, tableData: TableData[], isCache?: boolean): Rel;
export declare function getInstanceTreeRelation<T = Rel['table']>(params: {
    data: any[];
    lookup: (item: any, index: number) => boolean;
    childrenKey: string;
    isCache?: boolean;
    cacheDispose?: {
        get: () => PlmProject.Relation<T> | 'not';
        set: (value: any) => void;
    };
}): PlmProject.Relation<any>;
/**
 * @description 获取插入目标的参数信息 (这里获取项目ID是添加新建专用，获取实际的项目id请使用 projectUtility.getInstanceProjectId(instanceInfo))
 * @date 2022-12-27 11:01:51
 * @export
 * @param {Rel} rel
 * @param {ProjectGeneral} projectGeneral
 * @param {boolean} [isSelected]
 * @returns {*}
 */
export declare function getInsertDataParams(rel: Rel, pageInstance: APP.ProjectInstance<PlanAttr>, isSelected?: boolean): {
    params: {
        pid: string;
        targetId: string | null;
        projectId: string | null;
    };
    parentRow: PlmTask<CompoundDate>;
    parentObject: {
        value: string;
        apicode: string;
        label: string;
    } | undefined;
    projectOptionMap: any[];
};
/**
 * @description 获取项目类型
 * @date 2022-12-27 17:29:05
 * @export
 * @param {string} objectId
 * @param {Record<string, any>[]} projectOptionMap
 * @returns {*}
 */
export declare function getTypeObject(objectId: string, projectGeneral: ProjectGeneral): {
    value: string;
    apicode: string;
    label: string;
} | undefined;
/** 根据数据类型 */
export declare function getDateServerKey(type: PlmProject.ServerDateType): {
    startKey: string;
    endKey: string;
    durationKey: string;
};
/**
 * @date 2022-11-18 16:44:04
 * @export
 * @param {PlmTask} task 需要对齐的任务
 * @param {PlmTask} [alignTarget] 对齐目标
 * @returns {*}
 */
/**
 * @description 处理层级关系变化后的时间对齐
 * @date 2023-01-03 10:17:08
 * @export
 * @param {PlmProject.Task['id']} taskId 初始化对齐id
 * @param {Options['type']} type 对齐类型
 * @param {GanttStatic} gantt gantt 实例
 * @param {PlmTask} ancestor 需要更新的目标
 * @param {(PlmTask | null)} alignTarget 对齐的目标
 * @param {PlmProject.ServerDateType} dateType 对齐数据的key
 * @param {PlmTask} ancestorGanttTask 需要更新的目标的 gantt 实例
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate] 生成服务端更新的方法
 * @returns {*}
 */
export declare function timeAlignmentBasics(props: {
    taskId: PlmProject.Task['id'];
    type: Options['type'];
    gantt: GanttStatic;
    tableAllList: TableData[];
    ancestor: PlmTask;
    alignTarget: PlmTask | null;
    dateType: PlmProject.ServerDateType;
    ancestorGanttTask: PlmTask;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): {
    table: {
        [x: string]: string | number;
    };
    gantt: {
        start_date: Date;
        end_date: Date;
        duration: number;
    };
    updateList: (() => void)[];
};
interface Options {
    /** 操作方式 升级 降级 行内 */
    type: 'upgrade' | 'downgrade' | 'inline' | 'son';
    /** 是否更新 gantt */
    isUpdateGantt?: boolean;
}
/**
 * @description 更新开始结束时间、持续时间 (方法默认只会更新table数据)
 * @date 2022-11-19 09:51:42
 * @export
 * @param {GanttStatic} gantt 甘特图实例
 * @param {PlmProject.Task["id"]} taskId 任务id
 * @param {TableData[]} tableData table数据
 * @param {Options} { isUpdateGantt, type } isUpdateGantt 升级降级（如果改变数据后会调用 updateGanttTaskStructure 就可以设置为 false）
 * @param {PlmProject.ServerDateType} dateType 时间类型
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate] 生成服务端更新
 */
export declare function timeAlignment(params: {
    gantt: GanttStatic;
    taskId: PlmProject.Task['id'];
    tableData: TableData[];
    options: Options;
    dateType: PlmProject.ServerDateType;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/**
 * @description 优化开始、结束时间，持续时长的更新
 * @date 2023-01-09 10:23:57
 * @export
 * @param {PlmTask} tableTask table row 的数据
 * @param {Record<string, any>} tableUpdateData 更新数据
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 * @returns {*}  {boolean} 是否更新
 */
export declare function optimizationDateUpdate(params: {
    tableTask: PlmTask;
    tableUpdateData: Record<string, any>;
    tableData: TableData[];
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
    gantt: GanttStatic;
    dateType: PlmProject.ServerDateType;
}, context: TableGanttContextProps): boolean;
export declare function toAlignmentType(raw: any, name: string): string;
/**
 * @description 解除前后置关系
 * @date 2022-12-13 13:01:47
 * @export
 * @param {GanttStatic} gantt
 * @param {string} parentTaskId
 * @param {string} taskId
 * @param {(React.MutableRefObject<TransformData | undefined>)} transformData
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 */
export declare function dissolvePerPostRel(gantt: GanttStatic, parentTaskId: string, taskId: string, context: TableGanttContextProps, generateServerUpdate?: DataUpdateManager['generateServerUpdate']): void;
/**
 * @description 解除关系
 * @date 2023-02-17 11:23:43
 * @export
 * @param {({
 *   task: PlmTask,
 *   relieveId: string,
 *   transformData: React.MutableRefObject<TransformData | undefined>,
 *   generateServerUpdate?: DataUpdateManager['generateServerUpdate'],
 * })} {
 *   task, 要解除关系的任务
 *   relieveId, 被解除任务的id
 *   transformData,
 *   generateServerUpdate
 * }
 */
export declare function relieveRel({ type, gantt, task, relieveId, generateServerUpdate, }: {
    type?: 'all' | 'pre' | 'post';
    gantt: GanttStatic;
    /** 甘特图任务实例 */
    task: PlmTask;
    relieveId: string;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/** 获取有子节点的后置节点 */
export declare function getHaveSonPostTasks({ gantt, task, children, context, }: {
    gantt: GanttStatic;
    task: PlmTask;
    children: PlmTask[];
    context: TableGanttContextProps;
}): PlmTask<CompoundDate>[];
/**
 * @description 删除多个 link 实例，并且解除前后置关系
 * @date 2023-01-09 11:37:32
 * @export
 * @param {GanttStatic} gantt 甘特图实例
 * @param {any[]} links 链接对象的数组
 * @param {(React.MutableRefObject<TransformData | undefined>)} transformData 转换 Table 数据到 ganttTask 数据的类的实例
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate] 更新提交到服务端的函数
 */
export declare function deleteLinks(gantt: GanttStatic, links: any[], context: TableGanttContextProps, generateServerUpdate?: DataUpdateManager['generateServerUpdate']): void;
/**
 * @description 预算费用对齐
 * @date 2022-11-19 09:51:42
 * @export
 * @param {GanttStatic} gantt 甘特图实例
 * @param {PlmProject.Task["id"]} taskId 任务id
 * @param {TableData[]} tableData table数据
 * @param {Options} { isUpdateGantt, type }
 * @param {PlmProject.ServerCostType} costType 费用类型
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate] 生成服务端更新
 */
export declare function budgetAlignment({ gantt, parentTaskId, tableData, costType, generateServerUpdate, }: {
    gantt: GanttStatic;
    parentTaskId: PlmProject.Task['id'];
    tableData: TableData[];
    costType: PlmProject.ServerCostType;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/** 计算子节点预算费用 然后更新到父节点 */
export declare function concatCost({ costType, task, gantt, generateServerUpdate, }: {
    gantt: GanttStatic;
    costType: PlmProject.ServerCostType;
    task: PlmTask;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/** 获取子节点费用总和 */
export declare function getChildrenConst({ costType, task, custom, }: {
    costType: PlmProject.ServerCostType;
    task: PlmTask;
    custom?: {
        key: string;
        getValue?: (item: any) => number;
        childrenKey?: string;
    };
}, context: TableGanttContextProps): {
    old: number;
    cost: number;
} | undefined;
/** 根据费用类型 获取服务端的费用id */
export declare function getCostServerKey(type: PlmProject.ServerCostType): {
    key: string;
};
/**
 * @description 清空预算费用
 * @date 2022-12-13 10:44:04
 * @export
 * @param {PlmTask[]} tasks
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 */
export declare function emptyPresetCost(gantt: GanttStatic, tasks: PlmTask[], { type }: Options, context: TableGanttContextProps, generateServerUpdate?: DataUpdateManager['generateServerUpdate']): void;
/** 根据日历 获取进度 */
export declare function getProgress({ task, calendar, pageRootInstance, primitiveProgress, start, end, }: {
    primitiveProgress: string;
    calendar?: PlmProject.GanttCalendarInstance<Moment> | null | undefined;
    pageRootInstance?: APP.ProjectInstance;
    start?: DateType;
    end?: DateType;
    task?: PlmTask;
}): {
    table: "~#~";
    gantt: number;
} | {
    table: number;
    gantt: number;
};
/**
 * @description 进度对齐
 * @date 2023-01-09 11:25:23
 * @param {GanttStatic} gantt 甘特图实例
 * @param {PlmProject.Task['id']} parentTaskId 父id
 * @param {TableData[]} tableData table数据
 * @param {Options} { isUpdateGantt }
 * @param {PlmProject.ServerProgressType} progressType 进度类型
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate] 生成服务端更新函数
 */
export declare function progressAlignment(context: TableGanttContextProps, gantt: GanttStatic, parentTaskId: PlmProject.Task['id'], tableData: TableData[], { isUpdateGantt }: Partial<Options>, progressType: PlmProject.ServerProgressType, generateServerUpdate?: DataUpdateManager['generateServerUpdate']): void;
/**
 * @description 更新节点进度 (自动根据子节点进度更新)
 * @date 2023-01-09 11:33:05
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmProject.ServerProgressType} progressType 进度类型
 * @param {PlmTask} task table row 数据
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 */
export declare function concatProgress(gantt: GanttStatic, progressType: PlmProject.ServerProgressType, task: PlmTask, context: TableGanttContextProps, generateServerUpdate?: DataUpdateManager['generateServerUpdate']): void;
/** 根据进度类型 获取服务端的进度id */
export declare function getProgressServerKey(type: PlmProject.ServerProgressType): {
    key: string;
};
/** 获取子节点的进度 */
export declare function getChildrenProgress(context: TableGanttContextProps, progressType: PlmProject.ServerProgressType, task: PlmTask): {
    old: number;
    progress: number;
} | undefined;
export declare function refreshSerialNumber(params: {
    list: PlmTask[];
    gantt: GanttStatic;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/**
 * @description 优化新父级的前后置关系
 * @date 2023-03-31 08:54:53
 * @param {({
 *   gantt: GanttStatic;
 *   isTransfer: boolean;
 *   instanceInfo: APP.ProjectInstance<PlanAttr>;
 *   parent: PlmTask;
 *   transformData: React.MutableRefObject<TransformData | undefined>;
 *   ganttParent: PlmTask;
 *   children: PlmTask[];
 *   tableList: PlmTask[];
 *   isSign?: boolean;
 *   generateServerUpdate: DataUpdateManager['generateServerUpdate'];
 * })} params
 */
export declare function optimizeNewParentPrePost(params: {
    gantt: GanttStatic;
    isTransfer: boolean;
    parent: PlmTask;
    ganttParent?: PlmTask;
    children: PlmTask[];
    tableList: PlmTask[];
    generateServerUpdate: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
export {};
