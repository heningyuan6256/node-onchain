/// <reference types="react" />
import { APP, QiankunStateFromMaster } from '../../typings';
import { BasicsAttribute } from '../../utils/attribute';
import { ProjectGeneral } from '../../utils/project';
import { ProjectSubset } from '../../utils/project/const';
import { GanttStatic } from 'dhtmlx-gantt';
import { singleColumnType } from '../PlmTable';
import { clearGlobalCache } from './utils';
import { Authority } from '../../utils/authority';
import { TransferChooseParams } from './transfer-choose';
import { UpdateRoleType } from './types';
import { PlanAttr } from './utils/plan-attr';
import { DataSource, Rel, TableGanttContextProps } from './utils/type';
export declare enum TaskType {
    project = "project",
    task = "task",
    milestone = "milestone",
    placeholder = "placeholder"
}
export declare const endApiCode: PlanAttr[];
export declare const startApiCode: PlanAttr[];
/** 在有子节点的情况下行内编辑禁止项 */
export declare const prohibitionEditing: PlanAttr[];
export declare const SERIAL_NUMBER = "serialNumber";
/** 默认展示列 */
export declare const defaultColumns: string[];
/** 默认展示列 */
export declare const defaultChangeColumns: string[];
export declare enum GanttAttrs {
    /** 名称 */
    Name = "text",
    /** 计划开始时间 */
    ScheduleStartDate = "start_date",
    /** 计划结束时间 */
    ScheduleEndDate = "end_date",
    /** 计划持续时间 */
    ScheduleDuration = "duration",
    /** 计划进度 */
    ScheduleProgress = "progress",
    /** 当前进度 */
    CurrentProcess = "currentProcess",
    /** 预计开始时间 */
    EstimateStartDate = "estimate_start_date",
    /** 预计结束时间 */
    EstimateEndDate = "estimate_end_date",
    /** 预计持续时间 */
    EstimateDuration = "estimate_duration",
    /** 实际开始时间 */
    ActualStartDate = "actual_start_date",
    /** 实际结束时间 */
    ActualEndDate = "actual_end_date",
    /** 预计持续时间 */
    ActualDuration = "actual_duration",
    /** 预算费用 */
    Budget = "budget",
    /** 前置 */
    PreTask = "preTask",
    /** 后置任务 */
    PostTask = "postTask",
    /** 所有者 */
    TaskOwner = "TaskOwner"
}
/**
 * @description 在需要获取 gantt 开始结束属时长等属性时 调用此方法
 * @date 2023-01-05 15:49:49
 * @export
 * @returns {*}
 */
export declare function ganttBindStartEndKey(): Record<"progress" | "start" | "end" | "duration", string>;
type ChangeStackEvent = (key: string | symbol, value: any, dataUpdateManager: DataUpdateManager) => void;
export declare class ChangeStack<T> {
    /** 没有任何更新 */
    static NO_UPDATES: string;
    manager: DataUpdateManager;
    /**
     * ```
     *  rev: [1, 2, 3] current: [4] red: [5, 6]
     *  rev: [1, 2] current: [3] red: [4, 5, 6]
     *  rev: [1] current: [2] red: [3, 4, 5, 6]
     * ```
     */
    rev: string[];
    /**
     * ```
     *  rev: [1, 2, 3] current: [4] red: [5, 6]
     *  rev: [1, 2, 3, 4] current: [5] red: [6]
     *  rev: [1, 2, 3, 4, 5] current: [6] red: []
     * ```
     */
    red: string[];
    update: React.MutableRefObject<(data?: any[]) => void | undefined>;
    relNewRed: string[];
    relNewRev: string[];
    private revEvents;
    private redEvents;
    private namespace;
    constructor({ isProjectChange, namespace }: {
        isProjectChange: boolean;
        namespace: String;
    });
    private proxy;
    addChangeEvent(key: 'rev' | 'red', fn: ChangeStackEvent): void;
    setUpdate(update: ChangeStack<T>['update']): void;
    init(data: T): void;
    /** 保存当前数据 */
    private saveData;
    /** 保存当前 newMarker 数据 */
    private saveRelUpdateNew;
    batchUpdate(fn: (update: DataUpdateManager['generateServerUpdate']) => Promise<string | void> | string | void, data: T): Promise<void>;
    getBatchUpdate(generateServerUpdate: DataUpdateManager['generateServerUpdate']): ((fn: Function) => any) | ((fn: (update: (context: TableGanttContextProps, id: string, value: UpdateAttr) => void) => string | void | Promise<string | void>, data: T) => Promise<void>);
    /** 上一步 */
    revocation(): void;
    /** 上一步 newMarker */
    private revocationRelUpdateNew;
    /** 下一步 */
    redo(): void;
    /** 下一步 newMarker */
    private redoRelUpdateNew;
    /** 取消 */
    cancel(): void;
    /** 保存成功 */
    saveSuccess(): void;
    /** 保存 */
    save(): IterableIterator<UpdateStructure>;
    clearNodeInfoCache(params?: Parameters<typeof clearGlobalCache>[1]): void;
}
interface UpdateStructure {
    id: string;
    pid: string;
    newPid: string | null;
    projectId?: string;
    isUpdatePrePost: boolean;
    isRoot?: boolean;
    rowId?: string;
    delRow?: string | null;
    /** 这个属性仅前端需要 */
    isDegraded?: boolean | null;
    insAttrs: Record<string, any>;
    [k: string]: any;
}
interface UpdateAttr {
    [k: string]: any;
    newPid?: string;
    delRow?: string;
    /** 这个属性仅前端需要 */
    isDegraded?: boolean;
    isUpdatePrePost?: boolean;
}
interface RelationServe {
    id: string;
    children?: RelationServe[];
}
export declare class DataUpdateManager {
    map: Map<string, UpdateStructure>;
    set: Set<string>;
    stacks: string[][];
    red: string[][];
    instance: APP.ProjectInstance<PlanAttr>;
    isProjectChange: boolean;
    private namespace;
    constructor({ isProjectChange, namespace }: {
        isProjectChange: boolean;
        namespace: String;
    });
    setInstance(inst: APP.ProjectInstance<PlanAttr>): void;
    private disposeDraftEstimateDate;
    private generateServerUpdate;
    delServerUpdate(ids: UpdateStructure['id'][]): void;
    private createBlock;
    private closeBlock;
    batchUpdate(fn: (update: DataUpdateManager['generateServerUpdate']) => Promise<string | void> | string | void): Promise<string | undefined>;
    overlayMap(stack?: string[]): void;
    clear(): void;
    getAllUpdate(): IterableIterator<UpdateStructure>;
    getRelationServe(data: DataSource): RelationServe[];
}
/**
 * @description 合并相邻的选中数据
 * @date 2023-02-15 16:11:16
 * @export
 * @param {GanttStatic} gantt
 * @param {string[]} selectKeys
 * @returns {*}
 */
export declare function mergeAdjacent(gantt: GanttStatic, selectKeys: string[], extra?: {
    filtration: boolean;
}): string[][][];
/**
 * @description 生成跨层排序
 * @date 2023-02-16 09:43:30
 * @returns {*}
 */
export declare function generatedAcrossHierarchySort(): {
    nodes: Map<any, {
        index: number;
        len: number;
        id: string;
    }[]>;
    crossLayerSort: ({ oldParentId, leader, selectSize, }: {
        /** 旧的父级的id */
        oldParentId: string;
        /** 当前集合选中个数大小 */
        selectSize: number;
        /** 选中集合中的 领头人 */
        leader: Rel;
    }) => {
        index: number;
        len: number;
        id: string;
    }[];
    getInsertIdx: ({ oldParentIndex, list, leader, }: {
        /** 旧的父级的索引 */
        oldParentIndex: number;
        /** 排序后的 当前选中的全部集合 位置、大小信息 */
        list: {
            index: number;
            len: number;
            id: string;
        }[];
        /** 选中集合中的 领头人 */
        leader: Rel;
    }) => number;
};
export declare const OnlySon: Record<ProjectSubset, ProjectSubset[]>;
/** 初始化快捷键 */
export declare function initKeyboardShortcuts<T = any>(changeStack: ChangeStack<T>, saveUpdate: React.MutableRefObject<() => Promise<any>>, namespace?: React.MutableRefObject<string | undefined>): () => void;
/** 根据根节点类型控制”项目经理“和”所有者“的显示和隐藏*/
export declare function handoverManagerOrOwner(general: ProjectGeneral, columns: singleColumnType[]): void;
/** 获取计划列头 */
export declare function getPlanColumns({ instanceInfo, tabInfo, initialState, commonButtonStatus, editState, roleStack, isPreview, isProjectChange, highLight, }: {
    roleStack: UpdateRoleType[];
    instanceInfo: APP.ProjectInstance<PlanAttr>;
    tabInfo: Record<string, any>;
    initialState: APP.InitialState;
    editState?: ReturnType<typeof Authority.getEditAndControlledState>;
    commonButtonStatus?: boolean;
    isPreview?: boolean;
    isProjectChange?: boolean;
    highLight?: React.MutableRefObject<Record<string, string[]>>;
}): Promise<{
    map: Record<string, any>;
    nameIdMap: any;
    columns: import("../PlmTable").PlmTableColumnProps;
    pdmAttributeCustomizedVoList: BasicsAttribute<PlanAttr>[];
}>;
/** 获取计划页签属性 */
export declare function planGetAttributesMapId(attr: BasicsAttribute, isProjectChange?: boolean): string;
interface GetTransferState {
    (props: Record<'hasPrePost' | 'hasTargetDeliver', boolean> & {
        isCreate?: boolean;
    }): Promise<TransferChooseParams>;
    getTerms: (instance: APP.ProjectInstance) => Promise<Record<'hasPrePost' | 'hasTargetDeliver', boolean>>;
}
/** 获取更新前后置的规则 */
export declare const getTransferState: GetTransferState;
export declare class Master {
    operateLog: QiankunStateFromMaster;
    constructor(master: {
        operateLog: QiankunStateFromMaster;
    });
}
type TaskInfo = {
    typeName: string | undefined;
    name: string | undefined;
    number: string | undefined;
};
export declare class LogDescription {
    static add(params: TaskInfo | TaskInfo[], isInside?: boolean): string;
    static del(params: TaskInfo | TaskInfo[], isInside?: boolean): string;
}
export {};
