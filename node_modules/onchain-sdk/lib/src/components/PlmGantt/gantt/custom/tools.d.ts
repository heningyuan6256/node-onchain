/// <reference types="lodash" />
import { GanttStatic } from 'dhtmlx-gantt';
import moment, { Moment } from 'moment';
import { DateType } from '../../../../utils/project';
import { ProjectSubset } from '../../../../utils/project/const';
import { DataUpdateManager } from '../../const';
import { PlmTask, ProjectInstanceRef, TableGanttContextProps } from '../../utils/type';
/** 更新 */
export declare function updateSourceData(params: {
    target: PlmTask;
    type: PlmProject.UpdateType;
    event: MouseEvent;
    gantt: GanttStatic;
    tableData: any[];
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): Promise<PlmProject.NoLimitTask<CompoundDate, ProjectSubset, import('../../../../utils/project').ForbiddenTime, import("../../../../utils/attribute").BasicsAttribute<import("../../utils/plan-attr").PlanAttr>>>;
/**
 * @description
 * @date 2022-12-09 11:36:30
 * @export
 * @param {PlmProject.UpdateType} type
 * @param {PlmTask<DateType>} odlTask 原来的数据
 * @param {PlmTask<DateType>} task
 * @returns {*}
 */
export declare function isNoChange(params: {
    type: PlmProject.UpdateType;
    odlTask: PlmTask<DateType>;
    task: PlmTask<DateType>;
    instanceRef: ProjectInstanceRef;
}): boolean;
/** 设置全部父节点是否展开 */
export declare function setAllNodeOpenState(gantt: GanttStatic, isOpen?: boolean): string[];
/** 设置全部父节点是否展开 */
export declare function openExpandedRow(gantt: GanttStatic, ids: string[]): string[];
/**
 * @description: 动态添加 gantt 插件
 */
export declare function dynamicPlugins(gantt: GanttStatic, pluginConfig: any): void;
interface BanCtrlMultiselect extends Function {
    isMultiselect?: boolean;
}
/**
 * @description 初始化事件
 * @date 2022-12-10 11:46:27
 * @export
 * @param {GanttStatic} gantt
 * @returns {*}
 */
export declare function initSysEvent(gantt: GanttStatic): () => void;
/** 禁止 ctrl 多选 */
export declare const banCtrlMultiselect: BanCtrlMultiselect;
/**
 * @description 根据条件限制设置
 * @date 2023-03-31 16:38:28
 * @export
 * @param {{ task: PlmTask; oldTask: PlmTask }} params
 * @return 返回 false 表示不能更新， true 表示能更新
 */
export declare function processingDrag(params: {
    task: PlmTask;
    oldTask: PlmTask;
    isGantt?: boolean;
    isShowError?: boolean;
    error?: Record<PlmTask['constraint_type'], string>;
}): boolean | undefined;
/**
 * ```
 *  使用 batchUpdate 保证甘特图视图更新
 *  gantt.batchUpdate(() => {
 *    prePostRelCorrection(...)
 *  }, false)
 * ```
 * @description 方法会递归整个后置任务链 对任务链上的数据全部跟新
 * @date 2022-12-08 17:35:34
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmTask} preTask
 * @param {PlmTask} postTask
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 */
export declare function prePostRelCorrection(params: {
    gantt: GanttStatic;
    preTask: PlmTask;
    postTask: PlmTask;
    tableData: any[];
    type?: PlmProject.ServerDateType;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/**
 * ```
 *  使用 batchUpdate 保证甘特图视图更新
 *  gantt.batchUpdate(() => {
 *    postRelCorrection(...)
 *  }, false)
 * ```
 * @description 处理自身和子的后置任务
 * @date 2023-02-22 15:15:48
 * @export
 * @param {GanttStatic} gantt
 * @param {(PlmTask | null)} preTask 为 null 时将只处理自身的后置任务
 * @param {PlmTask} postTask
 * @param {any[]} tableData
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 */
export declare function postRelCorrection(params: {
    gantt: GanttStatic;
    preTask: PlmTask | null;
    postTask: PlmTask;
    tableData: any[];
    type?: PlmProject.ServerDateType;
    generateServerUpdate?: DataUpdateManager['generateServerUpdate'];
}, context: TableGanttContextProps): void;
/**
 * @description 是否有前置任务
 * @date 2022-12-08 16:38:07
 * @export
 * @param {PlmTask} task
 * @returns {*}
 */
export declare function hasPreTask<T = Date>(task: PlmTask<T>): boolean;
/**
 * @description 是否有后置任务
 * @date 2022-12-08 16:38:12
 * @export
 * @param {PlmTask} task
 * @returns {*}
 */
export declare function hasPostTask<T = Date>(task: PlmTask<T>): boolean;
/**
 * @description 后置任务是否在视图内
 * @date 2024-02-27 19:16:22
 * @export
 * @template T
 * @param {TableGanttContextProps} context
 * @param {PlmTask<T>} task
 * @returns {*}  {boolean}
 */
export declare function isViewPostTask<T = Date>(context: TableGanttContextProps, task: PlmTask<T>): boolean;
/**
 * @description 如果父级为任务，将获取父级的全部前置任务
 * @date 2022-12-30 14:42:38
 * @template T
 * @param {GanttStatic} gantt
 * @param {PlmTask<T>} task
 * @returns {*}
 * @export
 */
export declare function getPreParentLimitTasks<T = Date>(gantt: GanttStatic, task: PlmTask<T>): PlmTask<T>[];
/**
 * @description 获取所有祖先节点
 * @param gantt
 * @param task
 * @cache 带数据缓存
 * @returns
 */
export declare function getSelfAncestorPreEndDate<T = Date>(context: TableGanttContextProps, gantt: GanttStatic, task: PlmTask<T>): PlmTask<T>[];
/**
 * @description 更新前后置任务
 * @date 2023-01-04 11:03:14
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmProject.Link} link
 * @param {Map<string | number, string | number>} frontRearTaskMap
 * @param {DataUpdateManager['generateServerUpdate']} [generateServerUpdate]
 */
export declare function updateLinkPrePost(context: TableGanttContextProps, gantt: GanttStatic, link: PlmProject.Link, frontRearTaskMap: Map<string | number, string | number>, generateServerUpdate?: DataUpdateManager['generateServerUpdate']): void;
export declare class GanttToots {
    /** 是否是禁用的任务 (任务类型的项目) */
    static isProjectToTask<T>(task: PlmTask<T>): boolean;
    static isTaskToProject<T>(task: PlmTask<T>): boolean;
    static isPhaseToProject<T>(task: PlmTask<T>): boolean;
    static isIterationToProject<T>(task: PlmTask<T>): boolean;
    static isProject<T>(task: PlmTask<T>): boolean;
    static isProgram<T>(task: PlmTask<T>): boolean;
    static isPhase<T>(task: PlmTask<T>): boolean;
    static isIteration<T>(task: PlmTask<T>): boolean;
    static isMilestone<T>(task: PlmTask<T>): boolean;
    static isTask<T>(task: PlmTask<T>): boolean;
    static isGanttPhase<T>(task: PlmTask<T>): boolean;
    static isGanttIteration<T>(task: PlmTask<T>): boolean;
    /** 当前节点在编辑操作中是否有子 */
    static hasChildren<T>(task: PlmTask<T>): boolean;
    /** 当前节点在服务端是否有子 */
    static serverHasChildren<T>(task: PlmTask<T>): boolean;
    /** 是否被删除的任务 */
    static isDel<T>(task: PlmTask<T>): boolean;
    /** 是否是服务的删除标记 */
    static isServerDel<T>(task: PlmTask<T>): boolean;
    /** 是否是前端缓存的删除标记 */
    static isSignDel<T>(task: PlmTask<T>): boolean;
}
/**
 * @description 行内编辑时获取完整的时间
 * @date 2023-01-05 13:58:33
 * @export
 * @param {GanttStatic} gantt
 * @param {({ start?: Date | Moment | string | number; end?: Date | Moment | string | number; duration?: number })} props
 * @returns {*}
 */
export declare function inlineEditDate(gantt: GanttStatic, props: {
    start?: Date | Moment | string | number;
    end?: Date | Moment | string | number;
    duration?: number;
    instance: ProjectInstanceRef['current'];
}): {
    table: {
        start: string;
        end: string;
        duration: number;
    };
    gantt: {
        duration: number;
        start: Date;
        end: Date;
    };
} | undefined;
/**
 * @description 是否能建立前置关系
 * @date 2023-01-10 10:31:09
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmProject.Link} link
 * @returns {*}
 */
export declare function isPossiblePrePostRel(context: TableGanttContextProps, gantt: GanttStatic, link: PlmProject.Link, props?: {
    onError: () => void;
}): boolean;
declare const scrollbar: {
    x: number;
    y: number;
};
export declare const getScrollbar: () => {
    x: number;
    y: number;
};
export declare const setScrollbar: import("lodash").DebouncedFunc<(value: Partial<typeof scrollbar>) => void>;
export declare function resetLayout(gantt: GanttStatic, scrollbarClone?: typeof scrollbar): void;
/** 数据更新时专用 */
export declare function dataResetLayout(gantt: GanttStatic, scrollbarClone: typeof scrollbar): void;
/**
 * @description 获取开始结束
 * @date 2023-04-19 19:27:12
 * @export
 * @param {PlmTask} parent
 * @returns {*}
 */
export declare function getStartEndTime(context: TableGanttContextProps, task: PlmTask): {
    start: moment.Moment;
    end: moment.Moment;
};
export declare function getParentStartEndTime(context: TableGanttContextProps, gantt: GanttStatic, task: PlmTask, data: PlmTask[]): {
    start: moment.Moment;
    end: moment.Moment;
} | undefined;
export {};
