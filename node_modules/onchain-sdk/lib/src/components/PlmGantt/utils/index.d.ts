import { GanttStatic } from 'dhtmlx-gantt';
import { PlmTask, TableGanttContextProps } from './type';
import { singleColumnType } from '../../PlmTable';
export declare class GlobalCache<T> {
    private cache;
    private name;
    static clearAllCache(namespace: String): void;
    constructor();
    setCache(namespace: String, value: T): WeakMap<String, T>;
    getCache(namespace: String): NonNullable<T>;
}
declare class DescendMapCache extends GlobalCache<Map<string, string[]>> {
    constructor();
}
/** 节点全部子孙节点的全局缓存 */
export declare const GlobalDescendMapCache: DescendMapCache;
declare class AncestorMapCache extends GlobalCache<Map<string, string[]>> {
    constructor();
}
/** 节点全部祖先节点的全局缓存 */
export declare const GlobalAncestorMapCache: AncestorMapCache;
declare class AllProPostNodeMapCache extends GlobalCache<Map<string, PlmTask[]>> {
    constructor();
}
/** 节点全部前置链或者后置链上全部节点的全局缓存 */
export declare const GlobalAllProPostNodeMapCache: AllProPostNodeMapCache;
/** 获取全部子孙节点的 id */
export declare function getTaskDescendants(gantt: GanttStatic, taskId: PlmProject.Task['id']): string[];
/** 获取全部祖先节点的 id */
export declare function getTaskAncestors(gantt: GanttStatic, taskId: PlmProject.Task['id']): string[];
/**
 * @description 获取全部子孙节点的 id
 * @cache 带数据缓存
 */
export declare function getTaskCacheDescendants(context: TableGanttContextProps, gantt: GanttStatic, taskId: PlmProject.Task['id']): string[];
/**
 * @description 获取全部祖先节点的 id
 * @cache 带数据缓存
 */
export declare function getTaskCacheAncestors(context: TableGanttContextProps, gantt: GanttStatic, taskId: PlmProject.Task['id']): string[];
/**
 * @description 获取全部前后置任务链上的全部节点（也包含前置任务的父子任务所在的任务链）
 * @cache 带数据缓存
 */
export declare function getAllProPostCacheNode(context: TableGanttContextProps, gantt: GanttStatic, task: PlmTask, type: 'pre' | 'post'): PlmTask[];
/**
 * @description 获取全部前后置任务链上的全部节点（也包含前置任务的父子任务所在的任务链）
 * @date 2023-02-15 15:23:37
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmTask} task
 * @param {('pre' | 'post')} type
 * @returns {*}  {PlmTask[]}
 */
export declare function getAllProPostNode(context: TableGanttContextProps, gantt: GanttStatic, task: PlmTask, type: 'pre' | 'post'): PlmTask[];
/**
 * @description 获取前置任务
 * @date 2022-12-08 16:17:31
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmTask} task
 */
export declare function getPreTask<T = Date>(gantt: GanttStatic, task: PlmTask<T>): PlmTask<T>[];
/**
 * @description 获取后置任务
 * @date 2022-12-08 16:17:31
 * @export
 * @param {GanttStatic} gantt
 * @param {PlmTask} task
 * 必须传入ganttTask
 */
export declare function getPostTask<T = Date>(gantt: GanttStatic, task: PlmTask<T>): PlmTask<T>[];
/**
 * @description 用来处理前后置Corr(关系)
 * @date 2023-08-24 16:11:52
 * @export
 * @class PrePostCorrManage
 */
export declare class PrePostCorrManage {
    gantt: GanttStatic;
    type: 'pre' | 'post';
    task: PlmTask;
    constructor(type: 'pre' | 'post', task: string | PlmTask, gantt: GanttStatic);
    hasCorr(): boolean;
    getCorrTask(): PlmTask<CompoundDate>[];
    getDateSortCorrTask(type: 'Start' | 'End', direction?: '' | 'direction'): PlmTask<CompoundDate>[];
    getDateTheLimitCorrTask(params: {
        type: Parameters<PrePostCorrManage['getDateSortCorrTask']>[0];
        theLimit: 'max' | 'min';
    }): PlmTask<CompoundDate> | undefined;
}
/**
 * 合并gantt配置项
 * @param ganttConfing
 * @param object
 * @returns
 */
export declare function concatGanttConfig<T>(ganttConfing: Partial<T>, object: Partial<T>): Partial<T>;
/**
 * 清除任务在树中的位置缓存
 * @deprecated 拒绝直接调用请使用 clearGlobalCache 函数清除缓存
 */
export declare function clearAlRelationCache(namespace: String): void;
declare class RelationMapCache extends GlobalCache<Map<string, PlmProject.Relation<any>>> {
    constructor();
}
/** 节点在树中位置关系的全局缓存 */
export declare const GlobalRelationMapCache: RelationMapCache;
declare class TableSourceDataMapCache extends GlobalCache<Map<string, PlmTask>> {
    constructor();
}
/** 服务端原始数据映射（id => rowData）的全局缓存 */
export declare const GlobalTableSourceDataMapCache: TableSourceDataMapCache;
declare class ShowColumnsCache extends GlobalCache<singleColumnType[]> {
    constructor();
}
/** table展示列的全局缓存 */
export declare const GlobalShowColumnsCache: ShowColumnsCache;
export declare class CellSign<K = string, T = PlmTask['id']> extends Map<K, T[]> {
    private namespace;
    constructor(namespace: String);
    private getRowKey;
    /** 是否有红线标记 */
    hasSign(row: PlmTask, dataIndex: K): boolean | undefined;
    /**
     * 设置映射
     * ```
     * (isEq = true) => 相等的时候 需要删除已有数据
     * (isEq = false) => 不相等的时候 需要添加数据
     *
     *  dataIndex => [id, id, ...]
     *  `${id}-insId` => [dataIndex, dataIndex, ...]
     * ```
     */
    setBasicsSign(row: PlmTask, key: K, isEq: boolean): void;
    /** 自动设置 sign */
    autoSetSign(task: PlmTask): {
        hasOptType: boolean; /** 清除一个节点的兄弟、祖先节点信息 */
        hasInProcess: boolean;
        hasNewValue: boolean;
    };
    /** 获取只有当前列 红线标记的 rowId */
    needAdjustHeight(dataIndex: K): string[];
    /** 获取当前 rowId 有展示的划线标记的状态 */
    getShowSignIdxStats({ rowId, showDataIdx }: {
        rowId: string;
        showDataIdx: K[];
    }): {
        /** 展示红线标记列的个数 */
        showSignIdxLen: number;
        /** 控制添加删除列时需要的状态 */
        state: boolean;
    };
    /** 设置gantt有红线标记的行 */
    handleGanttRowHeight({ gantt, dataIdx, showDataIdx }: {
        gantt: GanttStatic;
        dataIdx: K;
        showDataIdx: K[];
    }): boolean;
}
declare class GlobalCellSignCache extends GlobalCache<CellSign<string, PlmTask['id']>> {
    constructor();
}
/** cell sign 标记映射的全局缓存 */
export declare const GlobalCellSignMapCache: GlobalCellSignCache;
declare class UseSingStatusCache extends GlobalCache<boolean> {
    constructor();
}
/** 红线标记开关状态的全局缓存 */
export declare const GlobalUseSingStatusCache: UseSingStatusCache;
/** 获取划线标记状态 */
export declare function getUseSignState(namespace: String): boolean;
type DataMarker = Omit<PlmProject.Relation<string>, 'beforeSibling' | 'afterSibling'>;
/**
 * @description 旧的数据标记
 * @date 2023-11-16 09:52:10
 * @export
 * @class OldDataMarkers
 */
declare class OldDataMarkers {
    type: string;
    map: Map<string, {
        serialNumber: number;
    } & DataMarker>;
    constructor();
    format(serialNumber: number, rel: PlmProject.Relation): {
        serialNumber: number;
        parent: string | undefined;
        stack: string[];
        self: string | undefined;
    };
    set(id: string, serialNumber: number, rel: PlmProject.Relation): void;
    get(id: string): ({
        serialNumber: number;
    } & DataMarker) | undefined;
    clear(): void;
    stringify(): string;
    parse(str: string): this;
}
/**
 * @description 新的数据标记
 * @date 2023-11-16 10:05:11
 * @class NewDataMarkers
 * @extends {OldDataMarkers}
 */
declare class NewDataMarkers extends OldDataMarkers {
    type: string;
    private newMarker;
    constructor();
    setMarkerStatus(id: string, value: boolean): Map<string, boolean>;
    getMarkerStatus(id: string): boolean | undefined;
    deleteMarkerStatus(id: string): boolean;
    clear(): void;
    stringify(): string;
    parse(str: string): this;
}
export declare class NewDataMarkersManager {
    private old;
    private new;
    /** 获取初始的位置标记实例 */
    getOldMarker(): OldDataMarkers;
    /** 获取更新后的位置标记实例 */
    getNewMarker(): NewDataMarkers;
    /** 清除位置标记 */
    clearMarker(type: 'old' | 'new'): void;
    /** 清除全部位置标记 */
    clearAllMarker(): void;
    /** 判断数据是否有差别 */
    isHasDiff(id: string): boolean;
}
declare class NewDataMarkersManagerCache extends GlobalCache<NewDataMarkersManager> {
    constructor();
}
/** 数据位置更新标记的全局缓存 */
export declare const GlobalMarkersManagerCache: NewDataMarkersManagerCache;
/** clearGlobalCache 函数清除缓存 */
declare const clearCache: {
    /** 清除一个节点的兄弟、祖先节点信息 */
    clearRelationCache(namespace: String): void;
    /** 清除一个节点全部祖先、子孙节点信息 */
    clearDescendAndAncestorCache(namespace: String): void;
    /** 清除一个节点全部前后置节点信息 */
    clearPrePostCache: (namespace: String) => void;
    /** 清除服务端初始数据全部节点关系 */
    clearRelationInit: (namespace: String) => void;
    /** 清除前端修改后数据全部节点关系 */
    clearRelationEdited: (namespace: String) => void;
};
/**
 * @description
 * @date 2023-02-18 14:16:06
 * @export
 * @param {(keyof typeof clearAll)[]} types
 * ```
 * clearRelationCache: 位置缓存（在树中的位置，兄弟，祖先）;
 * clearDescendAndAncestorCache: 全部祖先和子孙缓存;
 * clearPrePostCache: 全部前后置关系缓存;
 * clearRelationInit: 全部服务端初始化树结构位置缓存;
 * clearRelationEdited: 全部 上移下移升级降级 新位置的缓存;
 * ```
 */
export declare function clearGlobalCache(namespace: String, types: (keyof typeof clearCache)[]): void;
/** 最大持续时间 */
export declare const MAX_DURATION = 1000;
export {};
