import { APP } from '../../../typings';
import { BasicsAttribute } from '../../../utils/attribute';
import { ForbiddenTime } from '../../../utils/project';
import { ProjectSubset } from '../../../utils/project/const';
import { TableProps } from 'antd';
import { PlanAttr } from './plan-attr';
import { Columns } from '../../PlmDynamicColumn/types';
import { CalendarParams, Props, UpdateRoleType } from '../types';
import { TransformData } from '../tableGantt/tools';
import { ChangeStack, Master } from '../const';
import { BtnState, SetBtnState } from '../operationBar';
import { Dispatch, SetStateAction } from 'react';
import { ExportHooksResult } from '../../../hooks/useExport/type';
import { GanttStatic } from 'dhtmlx-gantt';
export type PlmTask<T = PlmProject.NoLimitTask['start_date']> = PlmProject.NoLimitTask<T, ProjectSubset, ForbiddenTime, BasicsAttribute<PlanAttr>>;
export type ProjectInstanceRef = React.MutableRefObject<APP.ProjectInstance<PlanAttr>>;
export interface Rel {
    gantt: PlmProject.Relation<PlmTask>;
    table: PlmProject.Relation<PlmTask>;
}
export type WebGanttData = PlmTask;
export type DataSource = TableProps<WebGanttData>['dataSource'];
/** 全部序号 | 视图内序号 | 删除标记序号 */
export type NumberMapName = 'allSerialNumber' | 'frontRearTaskMap' | 'delSignSerialNumber';
/** 用来存储在行内编辑前后置关系时，未来会被删除前后置关系的实例 */
export type AdvanceDeletePrePost = Map<string, {
    /** 是否是(编辑)前置 [true 前置] [false 后置] */
    isPre: boolean;
    /** 预备删除的实例id */
    value: string[];
}>;
export interface TableGanttContextProps extends Omit<Props, 'closeGantt'> {
    /** 命名空间 */
    namespace: String;
    /** 数据转换 */
    transformData: React.MutableRefObject<TransformData | undefined>;
    /** 是否全屏显示 */
    isFullscreen: boolean;
    /** 获取服务器数据 */
    getServerData: (params?: {
        loading: boolean;
    }) => Promise<any>;
    /** 动态显示的列 */
    dynamicColumns: Columns;
    /** 全部列 */
    columns: Columns;
    /** 动态列配置组件 */
    columnsConfigNode: JSX.Element;
    /** 编辑管理器（记录编辑的数据，保障上一步、下一步的数据正确） */
    changeStack: ChangeStack<DataSource>;
    loading: boolean;
    setLoading: (value: boolean) => void;
    /** 按钮禁止状态 */
    btnState: BtnState;
    /** 设置按钮状态 */
    setBtnState: SetBtnState;
    /** 计划属性对象 */
    planAttrs: BasicsAttribute<PlanAttr>[];
    /** 操作记录管理器 */
    master: Master;
    /** 日历 */
    calendarParams: CalendarParams;
    /** 是否开启红线标记 */
    isSign: boolean;
    /** 操作权限 */
    commonButtonStatus: boolean;
    /** 是否是预览 */
    isPreview: boolean;
    /** 是否关闭操作栏 */
    closeOperationBtn: boolean;
    /** 是否默认关闭甘特图 */
    propsCloseGantt?: boolean;
    /** 是否关闭甘特图 */
    closeGantt: boolean;
    /** 甘特图图打开关闭的方法 */
    setCloseGantt: Dispatch<SetStateAction<boolean>>;
    /** 处理面板选中角色 */
    roleStack: UpdateRoleType[];
    /** 甘特图实例 */
    gantt: GanttStatic;
    /** 属性编辑权限 */
    rootUpdateInstanceVo: Record<string, any>;
    /** 用来判断任务状态 */
    taskStatus: {
        isEnd: (task: PlmTask) => boolean;
        isRun: (task: PlmTask) => boolean;
        isFrozen: (task: PlmTask) => boolean;
    };
    /** xlsx 导出 */
    exportXlsx: ExportHooksResult;
    /** 存储预删除的前后置关系 */
    storageAdvanceDeletePrePost: AdvanceDeletePrePost;
    /** 查看视图 */
    viewRow: PlmTask | null;
    setViewRow: (task: PlmTask | null) => void;
    /** 全局loading */
    setGlobalLoading: (bool: boolean) => void;
    highLight: React.MutableRefObject<Record<string, string[]>>;
    setHighLight: (value: Record<string, string[]>) => void;
}
