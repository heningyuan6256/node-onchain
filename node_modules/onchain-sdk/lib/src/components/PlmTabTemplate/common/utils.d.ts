import { APP, ResponseData } from '../../../typings';
import { BasicsAttribute } from '../../../utils/attribute';
type ChangeType = 'add' | 'del' | 'edit';
interface Row {
    rowId: string;
    [k: string]: any;
}
interface Add {
    insAttrs: {
        apicode: string;
        id: string;
        value: string;
        [k: string]: any;
    }[];
}
export declare class tabTemplateUtils {
    /**
     * Author: hny_147
     * Date: 2023/02/20 19:55:47
     * Description: true代表能编辑，false不能编辑
     */
    static checkSaveCondition: ({ tabCode, addData, updateData, tableColumn, listCodeMap, tableData, instanceInfo, tab, temporaryIsEmpty, }: {
        tabCode: String | number;
        addData: Record<string, any>[];
        updateData: Record<string, any>[];
        tableColumn: Record<string, any>[];
        listCodeMap: Record<string, any>;
        tableData: Record<string, any>[];
        instanceInfo: Record<string, any>;
        tab: string;
        temporaryIsEmpty: boolean;
    }) => boolean;
    /**
     * Author: hny_147
     * Date: 2023/02/20 21:19:15
     * Description: 获取添加数据
     */
    static getAddData: ({ tabCode, addData, instanceInfo, tableColumn, originalTableColumn, replaceData, }: {
        tabCode: String | number;
        addData: Record<string, any>[];
        tableColumn: Record<string, any>[];
        instanceInfo: Record<string, any>;
        originalTableColumn: Record<string, any>[];
        replaceData?: Record<string, any> | undefined;
    }) => {
        insAttrs: Record<string, any>[];
    }[];
    /**
     * Author: hny_147
     * Date: 2023/02/20 21:20:51
     * Description: 获取修改数据
     */
    static getUpdateData: ({ tabCode, instanceInfo, tableColumn, originalTableColumn, tableData, updateData, versionMap, isVersionOrderManager, }: {
        tabCode: String | number;
        updateData: Record<string, any>[];
        tableColumn: Record<string, any>[];
        instanceInfo: Record<string, any>;
        tableData: Record<string, any>[];
        originalTableColumn: Record<string, any>[];
        versionMap?: Record<string, any> | undefined;
        isVersionOrderManager?: any;
    }) => Record<string, any>[];
    /**
     * Author: hny_147
     * Date: 2023/02/22 11:26:35
     * Description: 获取删除Id
     */
    static getTemporaryDeleteIds: ({ needId, instanceInfo, deleteList, }: {
        needId: string;
        instanceInfo: Record<string, any>;
        deleteList: Record<string, any>[];
    }) => any[];
    /**
     * Author: hny_147
     * Date: 2023/02/22 11:26:35
     * Description: 删除数据去重
     */
    static getDeleteData: ({ needId, instanceInfo, deleteList, }: {
        needId: string;
        instanceInfo: Record<string, any>;
        deleteList: Record<string, any>[];
    }) => any[];
    /**
     * Author: hny_147
     * Date: 2023/02/22 12:34:52
     * Description: 转换字符
     */
    static converBytes(size: number): string;
    /**
     * Author: hny_147
     * Date: 2023/02/22 11:27:10
     * Description: 生成列头
     */
    static generateTableColumn: ({ tabInfo, instanceInfo, getCommonButtonStatus, isPreview, isChange, bomLevel, numberHighLight, objectIconMaps, newVersionAndLifeMap, topInstanceInfo, bomReplaceNumber, onChangeBomDoubleClick, previewFile, getInstanceInfoById, }: {
        bomReplaceNumber?: number | undefined;
        tabInfo: Record<string, any>;
        instanceInfo: Record<string, any>;
        getCommonButtonStatus: boolean;
        isPreview?: boolean | undefined;
        isChange?: boolean | undefined;
        bomLevel?: number | undefined;
        topInstanceInfo?: Record<string, any> | undefined;
        numberHighLight: any;
        /**
         * 使用图标示例
         * ```js
         * const { initialState, setInitialState } = useModel('@@initialState');
         * generateTableColumn({
         *  objectIconMaps: initialState?.objectIconMaps
         *  ...
         * })
         * ```
         */
        objectIconMaps?: Record<string, any> | undefined;
        newVersionAndLifeMap?: {
            versionMap: Record<string, any>;
            lifeCycleMap: Record<string, any>;
            versionOrderMap: Record<string, any>;
            problemVersionMap: Record<string, any>;
            versionsMaps: Record<string, any>;
            projectAllLifeCycMap: Record<string, any>;
        } | undefined;
        previewFile?: ((file: any) => any) | undefined;
        onChangeBomDoubleClick?: (() => void) | undefined;
        getInstanceInfoById?: (() => {
            result: {
                pdmAttributeCustomizedVoList: BasicsAttribute[];
                readInstanceVo: Record<string, any>;
                updateInstanceVo: Record<string, any>;
            };
        }) | undefined;
    }) => Promise<{
        originalTableColumn: any;
        columns: {
            title: string | JSX.Element;
            dataIndex: string | undefined;
            width: number | undefined;
            ellipsis: boolean;
            align: string | undefined;
            sorter: boolean;
            sort: number;
            editable: boolean;
            search: boolean | {
                type: any;
                props: {
                    options: any;
                    mode?: undefined;
                };
            } | {
                type: any;
                props: {
                    options: any;
                    mode: string;
                };
            } | undefined;
            valueType: string;
            formitem: {
                formatFormProps?: ((props: any, record: any, columnApicode: string) => any & ({
                    type: "Input";
                    cannotread?: string | undefined;
                    middleware?: any;
                    isbomtag?: boolean | undefined;
                    props?: Record<string, any> | import("antd").InputProps | undefined;
                } | {
                    type: "Select";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: import("../../PlmSelect").PlmSelectProps | undefined;
                } | {
                    type: "PopupSelect";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: any;
                } | {
                    type: "SearchSelect";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: any;
                } | {
                    type: "Checkbox.Group";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd/lib/checkbox").CheckboxGroupProps | undefined;
                } | {
                    type: "Checkbox";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd").CheckboxProps | undefined;
                } | {
                    type: "Input.TextArea";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd/lib/input").TextAreaProps | undefined;
                } | {
                    type: "Input.Password";
                    cannotread?: string | undefined;
                    props?: any;
                    middleware?: any;
                } | {
                    type: "Date";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd").DatePickerProps | undefined;
                } | {
                    type: "DatePicker.RangePicker";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd/lib/date-picker/generatePicker").RangePickerProps<any> | undefined;
                } | {
                    type: "TimePicker.RangePicker";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: any;
                } | {
                    type: "Image";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props: {};
                } | {
                    type: "File";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props: {};
                } | {
                    type: "Switch";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd").SwitchProps | undefined;
                } | {
                    type: "Number";
                    cannotread?: string | undefined;
                    props?: import("antd").InputNumberProps<import("@rc-component/mini-decimal").ValueType> | undefined;
                    middleware?: any;
                } | {
                    type: "Cascader";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: any;
                } | {
                    type: "TreeSelect";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd").TreeSelectProps<any, import("rc-tree-select/lib/TreeSelect").DefaultOptionType> | undefined;
                } | {
                    type: "Radio";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd").RadioProps | undefined;
                } | {
                    type: "Radio.Group";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: import("antd").RadioGroupProps | undefined;
                } | {
                    type: "Slider";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: import("antd").SliderSingleProps | undefined;
                } | {
                    type: "dynamicTable";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: any;
                } | {
                    type: "Markdown";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: any;
                } | {
                    type: "InputFile";
                    cannotread?: string | undefined;
                    middleware?: any;
                    props?: any;
                } | {
                    type: "DocumentFile";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: any;
                } | {
                    type: "SelectTransfer";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: (import("../../PlmSelect").PlmSelectProps & {
                        attr: BasicsAttribute<string>;
                        allListOptions: Record<string, any[]>;
                        popoverTransfer: Omit<import("../../PlmPopoverTransfer").PlmPopoverTransferProps, "attr" | "allListOptions">;
                    }) | undefined;
                } | {
                    type: "CompositeForm";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: any;
                } | {
                    type: "Title";
                    middleware?: any;
                    cannotread?: string | undefined;
                    props?: any;
                })) | undefined;
            } & {
                type: "Input";
                cannotread?: string | undefined;
                middleware?: any;
                isbomtag?: boolean | undefined;
                props?: Record<string, any> | import("antd").InputProps | undefined;
            };
            isUser: boolean | undefined;
            apicode: any;
            fixed: boolean | undefined;
            required: boolean;
            dataFrom: "0" | "1" | "2";
            addDefValue: string;
            canNotView: boolean;
            render: any;
            id: string;
            attr: any;
        }[];
        listCodeMap: Record<string, any>;
    }>;
    /**
     * Author: hny_147
     * Date: 2023/02/22 14:47:38
     * Description: 获取版本和生命周期
     */
    static getVersionAndLifeCycle: (insId: string[], instanceInfo: Record<string, any>) => Promise<{
        lifeCycleMap: any;
        versionMap: any;
        versionOrderMap: any;
    }>;
    /**
     * Author: hny_147
     * Date: 2023/02/22 14:47:38
     * Description: 获取版本
     */
    static getAllVersions: (insId: string[]) => Promise<{
        versionMap: any;
    }>;
    /**
     * @info <deprecated> 上传记录已弃用，在上层TUS中的upload-success回调处理
     */
    static getUploadAssembly: (itemData: any) => Promise<void>;
    static onSaveOptimized(params: {
        result: ResponseData;
        serverParams: {
            rowList: Add[];
            updateRowList: Row[];
            deleteRowIds: string[];
            [k: string]: any;
        };
        tableData: APP.instanceInfoType[];
        onUpdate: (params: {
            type: ChangeType;
            edit?: Record<string, any>[];
            add?: Add[];
            list: APP.instanceInfoType[];
        }) => void;
    }): void;
    static isAttributeControlled(tabInfoParams: any, instanceInfoParams: any): boolean;
}
export {};
