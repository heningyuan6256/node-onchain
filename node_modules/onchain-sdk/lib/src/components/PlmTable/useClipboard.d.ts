import { PlmTableProps } from '.';
import { ClipboardArray } from '../../typings';
type PasteInto = 'child' | 'sibling';
export interface Clipboard {
    setDataSource: <T = any>(type: 'shear' | 'copy' | 'paste', data: T[]) => void;
    pasteInto?: PasteInto;
    /** 子所在的属性名称，默认`children` */
    childKeyName?: string;
    /** 是否使用红线标记，默认`true` */
    isMark?: boolean;
    /** 剪切前触发 */
    onBeforeShear?: <T = any>(rows: T[]) => Promise<boolean>;
    /** 剪切后触发 */
    onAfterShear?: <T = any>(rows: T[]) => void;
    /** 剪切的数据删除前触发 */
    onBeforeDeleteShear?: <T = any>(params: {
        isSameSpace: boolean;
        deletes: T[];
    }) => Promise<boolean>;
    /**
     * 剪切的数据删除后触发
     * ```js
     *  if(isSameSpace) {
     *    // 当前table内触发的剪切删除
     *  } else {
     *    // 其他table内触发的剪切删除
     *    runSave()
     *  }
     * ```
     */
    onAfterDeleteShear?: <T = any>(params: {
        isSameSpace: boolean;
        deletes: T[];
    }) => Promise<boolean>;
    /** 复制前触发 */
    onBeforeCopy?: <T = any>(rows: T[]) => Promise<boolean>;
    /** 复制后触发 */
    onAfterCopy?: <T = any>(rows: T[]) => void;
    /** 粘贴前触发 */
    onBeforePaste?: <T = any>(params: {
        target: T;
        rows: T[];
        type: PasteInto;
    }) => Promise<boolean>;
    /** 粘贴后触发 */
    onAfterPaste?: <T = any>(params: {
        target: T;
        type: PasteInto;
    }) => void;
}
export declare const useClipboard: (params: PlmTableProps, namespace: string) => {
    namespace: string;
    isGainFocus: boolean;
    focus: () => void;
    shear: (clipboard: Clipboard, data: any[]) => Promise<void>;
    copy: (clipboard: Clipboard, data: any[]) => Promise<void>;
    paste: (clipboard: Clipboard, { pasteData, pasteTarget, }: {
        pasteData: ClipboardArray;
        pasteTarget: React.Key[];
    }) => Promise<void>;
    FocusDom: JSX.Element;
};
export {};
