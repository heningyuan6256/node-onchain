import { BasicsAttribute } from '../../utils/attribute';
import { PlmColumn } from '.';
import { contentProps } from '../PlmFormItem';
import { tabInfoProps } from '../PlmTabTemplate';
import { PlmTableFormItemProps } from './PlmTableFormItem';
declare class TableUtils {
    static getTrulyHighlight: ({ formitem, highlight }: {
        formitem: PlmTableFormItemProps['formprops'];
        highlight?: string[] | undefined;
    }) => {
        trulyHighlight: any;
        needTransform: boolean;
    };
    static wrapperHighLight: ({ highlight, formitem, value, originValue, }: {
        originValue: any;
        highlight?: string[] | undefined;
        formitem: contentProps;
        value: string;
    }) => string | JSX.Element;
    static renderCacheCell: (row: Record<string, any>, dataIndex: string, formitem: contentProps, customRender?: ((data: any) => any) | undefined, options?: {
        highlight?: string[];
    }) => JSX.Element;
    static renderReadonlyItem: ({ apicode, formitem, value, record, }: {
        apicode?: string | undefined;
        formitem: contentProps;
        value: string | any[];
        record?: Record<string, any> | undefined;
    }) => any;
    static renderRowClassName: (record: Record<string, any>) => string;
    static renderVersionColumn: (value: string, highlight?: string[]) => JSX.Element;
    static avoid0TypeConvert(value: any): any;
    static isEqual(old: any, value: any): boolean;
    static getCellSignState(row: Record<string, any>, dataIndex: string): {
        hasOptType: boolean;
        hasInProcess: any;
        hasNewValue: any;
    };
    static getRowSignState(row: Record<string, any>, handleCellIsEq?: (type: 'newVal' | 'inProcess', dataIndex: string, isEq: boolean, latestValue: any, oldValue: any) => void): {
        hasOptType: boolean;
        hasInProcess: boolean;
        hasNewValue: boolean;
    };
    static isEmptyValue(latest: any): boolean;
    static sortAndFilterTable(params: {
        sorters: string;
        filters: string;
        sortersField: string;
        /** 前端处理后的 columns */
        tableColumns: PlmColumn[];
        /** 版次记录页签、历史记录页签 需要该属性进行额外处理 */
        tabInfo?: Partial<tabInfoProps>;
        /** 服务端原始属性（版次记录页签需要该属性进行额外处理）*/
        originTableColumns?: BasicsAttribute[];
    }): {
        sorters: string;
        filters: string;
        sortersField: string;
    };
    static monitoringCol(box: Element, columnWidth?: number | string): () => void;
}
export default TableUtils;
