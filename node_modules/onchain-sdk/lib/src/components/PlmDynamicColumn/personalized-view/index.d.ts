import React from 'react';
import { ServerData } from '../hooks';
import { Config } from '../hooks';
import { APP, ResponseData } from '../../../typings';
import { BasicsAttribute } from '../../../utils/attribute';
type Open = () => void;
type Close = () => void;
export interface PersonalizedViewRef {
    open: Open;
    close: Close;
    setDefault: (row: ServerData) => Promise<ResponseData>;
}
interface Props {
    value: ServerData | null;
    config: Config;
    tabCode: string | number;
    itemCode: string | number;
    attrs: BasicsAttribute[];
    instance: APP.instanceInfoType;
    getList: (sort?: string) => Promise<ServerData[]>;
    setStoreList: (value: any[]) => void;
    updateSelect: (row: ServerData) => void;
    onSubmit?: (params: {
        row?: ServerData; /** 暂存列 */
        temporaryStorage?: BasicsAttribute[];
    }) => void;
}
export declare const isDefaultOptions: {
    value: number;
    label: string;
    disabled: boolean;
}[];
export declare const scopeOptions: {
    value: string;
    label: string;
    disabled: boolean;
}[];
export interface GetListViewParams {
    /** 是否更新视图列 */
    isUpdateView?: boolean;
    /** 是否更新列表 */
    isUpdateList?: boolean;
    /** 暂存列 */
    temporaryStorage?: BasicsAttribute[];
    /** 指定要使用的视图 */
    specifiedUseId?: string;
}
declare const PersonalizedView: React.ForwardRefExoticComponent<Props & React.RefAttributes<PersonalizedViewRef>>;
export default PersonalizedView;
