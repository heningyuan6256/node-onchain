/// <reference types="react" />
export interface Plm3DWarpperProps {
    src?: string;
    fileName?: string;
    extension?: string;
    instanceInfo?: any;
    noShowLayout?: boolean;
    isThumb?: boolean;
    insId: any;
    versionOrder?: string;
    showInfo?: boolean;
    instanceId: string;
    showStruc?: boolean;
}
export declare const dataFormat: {
    '3Shape DCM (*.dcm)': string[];
    zip: string[];
    'ACIS (*.sat;*.asat;*.sab;*.asab)': string[];
    'Cadds (_pd;*._pd)': string[];
    'Catia V4 2D (*.model;*.dlv;*.dlv3;*.exp)': string[];
    'Catia V4 3D (*.model;*.dlv;*.dlv3;*.exp;*.session)': string[];
    'Catia V5 2D (*.CATDrawing)': string[];
    'Catia V5 3D (*.CATPart;*.CATProduct)': string[];
    'Catia V6/3DEXPERIENCE 2D (*.3dxml)': string[];
    'Catia V6/3DEXPERIENCE 3D (*.3dxml)': string[];
    'Cercon (*.art)': string[];
    'Cerec - Sirona (*.sdt;*.cdt;*.idt)': string[];
    'CGR (*.cgr)': string[];
    'Creo View (*.ol;*.ed;*.edz;*.pvz;*.pvs)': string[];
    'DWG 2D (*.dwg)': string[];
    'DWG/DXF 3D (*.dwg;*.dxf)': string[];
    'DXF 2D (*.dxf)': string[];
    'FBX (*.fbx)': string[];
    'Fusion 360 (*.f3d)': string[];
    'glTF (*.gltf)': string[];
    'glTF Binary (*.glb)': string[];
    'IFC (*.ifc;*.ifcxml;*.ifczip)': string[];
    'IGES 2D (*.igs;*.iges;*.ig2)': string[];
    'IGES 3D (*.igs;*.iges)': string[];
    'Inventor 3D (*.ipt,*.iam)': string[];
    'JT (*.jt)': string[];
    'Navisworks (*.nwd)': string[];
    'OBJ (*.obj)': string[];
    'PARASOLID (*.x_t;*.x_b;*.xmt_txt;*.xmt_bin)': string[];
    'PLM XML (*.plmxml)': string[];
    'Procera (*.c3s)': string[];
    'ProE/Creo Parametric 2D (*.drw;*.drw.*)': string[];
    'ProE/Creo Parametric 3D (*.prt;*.prt.*;*.xpr;*.asm;*.asm.*;*.xas)': string[];
    'Revit (*.rvt;*.rfa)': string[];
    'Rhino (*.3dm)': string[];
    'Robface (*.rf)': string[];
    'SMG (*.smg;*.smggeom)': string[];
    'Solid Edge 2D (*.dft)': string[];
    'Solid Edge 3D (*.par;*.psm;*.asm;*.pwd)': string[];
    'SolidWorks 2D (*.slddrw)': string[];
    'SolidWorks 3D (*.sldprt;*.sldasm)': string[];
    'STEP (*.step;*.stp;*.stpz;*.stpx;*.stpxz;*.stpnc)': string[];
    'STL (*.stl)': string[];
    'UG NX 2D (*.prt)': string[];
    'UG NX 3D (*.prt)': string[];
    'VDAFS (*.vda)': string[];
};
export declare const inputFormat: Record<string, string>;
declare const Plm3DWarpper: React.FC<Plm3DWarpperProps>;
export default Plm3DWarpper;
