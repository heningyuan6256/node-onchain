import { BaseComponentProps } from '../../typings';
import { FormItemProps, InputProps, DatePickerProps, SwitchProps, InputNumberProps, CascaderProps, TreeSelectProps, RadioProps, RadioGroupProps, SliderSingleProps } from 'antd';
import React, { FC } from 'react';
import { CheckboxProps } from 'antd';
import { TextAreaProps } from 'antd/lib/input';
import { RangePickerProps } from 'antd/lib/date-picker/generatePicker';
import { CheckboxGroupProps } from 'antd/lib/checkbox';
import { PlmSelectProps } from '../PlmSelect';
import 'video-react/dist/video-react.css';
import { BasicsAttribute } from '../../utils/attribute';
import { PlmPopoverTransferProps } from '../PlmPopoverTransfer';
export declare const PlmTreeSelect: FC<TreeSelectProps>;
export type contentProps = ({
    formatFormProps?: (props: contentProps['props'], record: any, columnApicode: string) => contentProps;
} & ({
    type: 'Input';
    cannotread?: string;
    middleware?: any;
    isbomtag?: boolean;
    props?: InputProps | Record<string, any>;
} | {
    type: 'Select';
    middleware?: any;
    cannotread?: string;
    props?: PlmSelectProps;
} | {
    type: 'PopupSelect';
    cannotread?: string;
    middleware?: any;
    props?: any;
} | {
    type: 'SearchSelect';
    middleware?: any;
    cannotread?: string;
    props?: any;
} | {
    type: 'Checkbox.Group';
    cannotread?: string;
    middleware?: any;
    props?: CheckboxGroupProps;
} | {
    type: 'Checkbox';
    cannotread?: string;
    middleware?: any;
    props?: CheckboxProps;
} | {
    type: 'Input.TextArea';
    cannotread?: string;
    middleware?: any;
    props?: TextAreaProps;
} | {
    type: 'Input.Password';
    cannotread?: string;
    props?: any;
    middleware?: any;
} | {
    type: 'Date';
    cannotread?: string;
    middleware?: any;
    props?: DatePickerProps;
} | {
    type: 'DatePicker.RangePicker';
    cannotread?: string;
    middleware?: any;
    props?: RangePickerProps<any>;
} | {
    type: 'TimePicker.RangePicker';
    cannotread?: string;
    middleware?: any;
    props?: any;
} | {
    type: 'Image';
    cannotread?: string;
    middleware?: any;
    props: {};
} | {
    type: 'File';
    cannotread?: string;
    middleware?: any;
    props: {};
} | {
    type: 'Switch';
    cannotread?: string;
    middleware?: any;
    props?: SwitchProps;
} | {
    type: 'Number';
    cannotread?: string;
    props?: InputNumberProps;
    middleware?: any;
} | {
    type: 'Cascader';
    cannotread?: string;
    middleware?: any;
    props?: CascaderProps;
} | {
    type: 'TreeSelect';
    cannotread?: string;
    middleware?: any;
    props?: TreeSelectProps<any>;
} | {
    type: 'Radio';
    cannotread?: string;
    middleware?: any;
    props?: RadioProps;
} | {
    type: 'Radio.Group';
    cannotread?: string;
    middleware?: any;
    props?: RadioGroupProps;
} | {
    type: 'Slider';
    middleware?: any;
    cannotread?: string;
    props?: SliderSingleProps;
} | {
    type: 'dynamicTable';
    middleware?: any;
    cannotread?: string;
    props?: any;
} | {
    type: 'Markdown';
    cannotread?: string;
    middleware?: any;
    props?: any;
} | {
    type: 'InputFile';
    cannotread?: string;
    middleware?: any;
    props?: any;
} | {
    type: 'DocumentFile';
    middleware?: any;
    cannotread?: string;
    props?: any;
} | {
    type: 'SelectTransfer';
    middleware?: any;
    cannotread?: string;
    props?: PlmSelectProps & {
        attr: BasicsAttribute;
        allListOptions: Record<string, any[]>;
        popoverTransfer: Omit<PlmPopoverTransferProps, 'allListOptions' | 'attr'>;
    };
} | {
    type: 'CompositeForm';
    middleware?: any;
    cannotread?: string;
    props?: any;
} | {
    type: 'Title';
    middleware?: any;
    cannotread?: string;
    props?: any;
}));
export interface PlmFormItemProps extends BaseComponentProps, FormItemProps {
    content: contentProps;
    ignoreNoWhiteSpaceStart?: boolean;
    readOnly?: boolean | (() => boolean);
    name?: string;
    suffix?: React.ReactNode | string;
    requiredMark?: any;
}
export interface PlmFormItemForwardRefProps {
}
declare const PlmFormItem: React.FC<PlmFormItemProps>;
export default PlmFormItem;
