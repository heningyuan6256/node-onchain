export declare const enum TrackOpTypes {
    GET = "get",
    HAS = "has",
    ITERATE = "iterate"
}
export declare const enum TriggerOpTypes {
    SET = "set",
    ADD = "add",
    DELETE = "delete",
    CLEAR = "clear"
}
export type DebuggerEventExtraInfo = {
    target: object;
    type: TrackOpTypes | TriggerOpTypes;
    key: any;
    newValue?: any;
    oldValue?: any;
    oldTarget?: Map<any, any> | Set<any>;
};
/**
 * @description 保护数据 禁止代理
 * @date 2023-04-18 22:43:22
 * @export
 * @param {*} value
 * @returns {*}
 */
export declare function protection<S>(value: S): S;
/**
 * @description 读取代理对象原始数据
 * @date 2023-04-18 22:43:40
 * @export
 * @template S
 * @param {S} state
 * @param {...any} params
 * @returns {*}  {S}
 */
export declare function toRaw<S>(state: S, ...params: any): S;
/**
 * @description 读取原始对象的代理数据
 * @date 2023-04-18 22:43:40
 * @export
 * @template S
 * @param {S} state
 * @param {...any} params
 * @returns {*}  {S}
 */
export declare function toProxy<S>(state: S, ...params: any): S;
export declare function observer<T extends Record<string, any>>(initialVal: T, cb: () => void, shallow: boolean, options?: WatchEffectOptions): T;
interface WatchEffectOptions {
    asyncOnceUpdate?: boolean;
    /** 是否需要保护（保护后不会被代理） */
    protection?: (value: unknown) => boolean;
    onTrack?: (event: DebuggerEventExtraInfo) => void;
    onTrigger?: (event: DebuggerEventExtraInfo) => void;
}
export declare function usePlmShallowReactive<S extends Record<string, any>>(initialState: S, options?: WatchEffectOptions): S;
export declare function usePlmReactive<S extends Record<string, any>>(initialState: S, options?: WatchEffectOptions): S;
export {};
