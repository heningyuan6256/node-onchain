import { ResponseData } from '../../typings';
export interface SendOperateLogProps {
    recordId: string;
    operation: string;
    optType: string;
    tableName: string;
}
export default class CommonService {
    static addOperateLog(data: SendOperateLogProps): Promise<any>;
    static upload(data: any): Promise<any>;
    static getInsByParams(data: any): Promise<any>;
    static customUpdate(url: string, method: string, params: Record<string, any>): Promise<any>;
    static getPriadd(params: any): Promise<any>;
    static getCodeItems(code: any): Promise<ResponseData>;
    static add(data: any): Promise<ResponseData>;
    static instanceUnlock(data: any): Promise<ResponseData>;
    static delInstance(params: any): Promise<ResponseData>;
    static getAllObjectType(): Promise<ResponseData>;
    static getListByCode(data: any): Promise<ResponseData>;
    static getListByCodes(data: any): Promise<ResponseData>;
    static transferformListByCodeList(codeList: any[], noBrackets?: Boolean, extra?: {
        productId?: string;
        projectId?: string;
    }): Promise<ResponseData>;
    static transferformQueryList(query: {
        affectInsId: string;
        attrId: string;
        instanceId: string;
        tabCode: string;
        versionOrder: string;
    }): Promise<ResponseData>;
    static transformServelessList(code: string): Promise<[any]>;
    static getUserId(id: any): Promise<ResponseData>;
    static treeList(): Promise<ResponseData>;
    static getInstanceNumber(params: {
        id: string;
    }): Promise<ResponseData>;
    static getInstanceData(params: {
        pageNo: number;
        pageSize: number;
        sort?: string;
        tenantId?: string;
        andQuery?: string;
        orQuery?: string;
        userId?: string;
        itemCodes?: string;
        productId?: string;
    }): Promise<ResponseData>;
    static formateRecords: (records: any[]) => any[];
    static formateRecords2: (records: any[], fn?: ((attr: Record<string, any>, index: number, record: Record<string, any>) => void) | undefined) => any[];
    static formateRecords3: (records: any[], fn?: ((attr: Record<string, any>, index: number, record: Record<string, any>) => void) | undefined) => any[];
    static getInstanceInfoById(instanceId: string, tabCode: string | number, authType?: string, version?: string, versionOrder?: string | number): Promise<ResponseData>;
    static getTabCountByInstanceId(instanceId: string, version: string, versionOrder: string): Promise<ResponseData>;
    static getAttrById(id: any, itemCode: any, tabCode: any): Promise<ResponseData>;
    static update(data: any): Promise<ResponseData>;
    static voidOrEnable(data: any): Promise<ResponseData>;
    static getItems(): Promise<ResponseData>;
    static getCreateMenuObject(params: {
        userId: string;
    }): Promise<ResponseData>;
    static getImportPlanUserPermission(params: any): Promise<ResponseData>;
    static getLogsByInstanceId(params: {
        recordId: string;
        pageNo: number;
        pageSize: number;
        [k: string]: number | string;
    }): Promise<ResponseData>;
    static getTabsByInstanceId(params: {
        itemCode: any;
        id: any;
    }): Promise<ResponseData>;
    static getAttributeByTab(params: {
        itemCode: any;
        tabCode: any;
        notInApiCode?: string;
    }): Promise<ResponseData>;
    static getImportAttributes(params: {
        itemCode: any;
        tabCode: any;
        operation: any;
        objectId?: any;
    }): Promise<ResponseData>;
    static getAttributes(params: {
        itemCode: any;
        tabCode: any;
        itemId?: string;
    }): Promise<ResponseData>;
    /** 获取tab表格属性 */
    static getAttributesAll(params: {
        itemCode: any;
        tabCode: any;
        itemId?: string;
    }): Promise<ResponseData>;
    static getTextRuleOption(): Promise<ResponseData>;
    static getConditionById(id: string): Promise<ResponseData>;
    static queryInstanceByCondition(content: string): Promise<ResponseData>;
    static getPdf(params: {
        previewUrl: string;
        fileSuffix: string;
        fileName: string;
    }): Promise<ResponseData>;
    static getDepartment(params: {
        pid: string;
    }): Promise<ResponseData>;
    static transfer2D(params: {
        previewUrl: string;
        fileSuffix?: string;
        fileName?: string;
        isDir?: string;
    }): Promise<ResponseData>;
    static transfer3D(params: {
        filename: string;
        file: string;
        prefix: string;
        input_format: string;
        assembly_zip?: '1' | '0';
        getResponse: boolean;
    }): Promise<ResponseData>;
    static getInstanceButtonById(instanceId: string, itemCode: string, tabCode: string | number, module: string, codes?: string): Promise<ResponseData>;
    static getInstanceFormTabInstanceModal(params: {
        pageNo: number;
        pageSize: number;
        sort?: string;
        tenantId?: string;
        andQuery?: string;
        orQuery?: string;
        userId?: string;
        itemCodes?: string;
        tabCode?: string;
        instanceId: string;
        objectId?: string;
        objIds?: string;
        ids: string;
        productId?: string;
    }): Promise<ResponseData>;
    static getPrintsWater(): Promise<ResponseData>;
    static getTabDataByInstanceId(params: {
        pageNo: number;
        pageSize: number;
        sort?: string;
        tenantId?: string;
        andQuery?: string;
        orQuery?: string;
        userId?: string;
        tabCode: string | number;
        instanceId: string;
        versionOrder?: string;
        insTabAttrs?: any;
        isNotPublished?: boolean;
        ids?: string;
        affectInsId?: string;
        version?: string;
        versionOrRevision?: 'version' | 'revision';
    }): Promise<ResponseData>;
    static getManufactUsed(params: {
        pageNo: number;
        pageSize: number;
        sort?: string;
        tenantId?: string;
        andQuery?: string;
        orQuery?: string;
        userId?: string;
        itemCodes: string;
        tabCode?: string;
        instanceId: string;
    }): Promise<ResponseData>;
    static getInstancePage(params: {
        pageNo?: number;
        pageSize?: number;
        sort?: string;
        tenantId?: string;
        andQuery?: string;
        orQuery?: string;
        userId?: string;
        notIds?: string;
        itemCodes?: string;
        tabCodes?: string;
        instanceId?: string;
    }): Promise<ResponseData>;
    static addDataToRelationTab(params: {
        id: string;
        versionNumber: string;
        tabCode: string | number;
        rowList: Record<string, any>[];
        updateRowList: Record<string, any>[];
        deleteRowIds: Record<string, any>[];
        url: string;
        itemCode?: string;
        affectedInstanceIds?: string;
    }): Promise<ResponseData>;
    static getAllReplaceObjectIdByObjectId(params: {
        objectId: string;
    }): Promise<ResponseData>;
    static getExtraAttrByObjectid(params: {
        objectId: string;
        itemCode: string;
        types: string;
        id: string;
    }): Promise<ResponseData>;
    static getApplyIdsObjectid(params: {
        id: string;
    }): Promise<ResponseData>;
    static createChangeWithAffectObjects(params: {
        insAttrs: any;
        rowList: any;
        actionType: string;
        tabCode: string;
        itemCode: string;
    }): Promise<ResponseData>;
    static getChangeInstanceInfoByInId({ instanceId, tabCode, authType, itemCode, affectInsId, childInsId, optType, pageNo, pageSize, sort, andQuery, bomReplaceAttrId, }: {
        instanceId: string;
        tabCode: string;
        authType: string;
        andQuery?: string;
        sort?: string;
        itemCode: string;
        optType?: string;
        pageNo?: number;
        pageSize?: number;
        childInsId?: string;
        bomReplaceAttrId?: string;
        affectInsId: string;
    }): Promise<ResponseData>;
    static getChangeDisposalById({ instanceId, tabCode, authType, itemCode, affectInsId, andQuery, sort, optType, whereUsedOpt, }: {
        instanceId: string;
        tabCode: string;
        authType: string;
        itemCode: string;
        andQuery: string;
        sort: string;
        optType?: string;
        affectInsId: string;
        whereUsedOpt?: string;
    }): Promise<ResponseData>;
    static savePublicRedLineInfo(params: {
        id: string;
        versionNumber?: string;
        tabCode: string | number;
        updateRowList?: Record<string, any>[];
        rowList?: Record<string, any>[];
        affectedInstanceIds?: string;
        optType?: string;
        rowId?: string;
        fileVersionOrder?: string;
    }): Promise<ResponseData>;
    static exportTabExcel(data: {
        instanceId: any;
        tabCodes: any;
        itemCode: string;
        levelNo?: any;
        viewId?: string;
        version: string;
        versionOrder: string;
        affectInsId?: string;
        unDisplayAttrApiCode?: string;
    }): Promise<ResponseData>;
    static exportUser(data: {
        insId: any;
        itemCode: string;
        tabCodes: any;
    }): Promise<ResponseData>;
    static exportUserGroup(data: {
        insId: any;
        itemCode: string;
        tabCodes: any;
    }): Promise<ResponseData>;
    static resetPublicRedLineInfo(params: {
        id: string;
        versionNumber?: string;
        tabCode: string | number;
        rowList: Record<string, any>[];
        affectedInstanceIds?: string;
    }): Promise<ResponseData>;
    static getCollectoropenData(params: {
        userId: string;
        sort?: string;
        labelColor?: string;
    }): Promise<ResponseData>;
    static addCollectoropenData(data: any): Promise<ResponseData>;
    static getDesignInstances(data: {
        changeInsId: string;
        tabCode: string;
        ids?: string;
    }): Promise<ResponseData>;
    static getdeletePDM(data: any): Promise<ResponseData>;
    static getdeleteAll(data: any): Promise<ResponseData>;
    /** 获取当前 itemCode 拥有的 子分类  */
    static getObject(itemCode: string): Promise<ResponseData>;
    static getAuthObjectType(): any;
    static getNoticeNumber(): Promise<ResponseData>;
    static getPageList({ url, page, pageSize, params, method, data, prefix, }: {
        url: string;
        page: number;
        method: string;
        pageSize: number;
        params: Record<string, any>;
        data: any;
        prefix: any;
    }): Promise<ResponseData>;
    static getObjectsItem(itemCode: string): Promise<ResponseData>;
    static addUser(data: any): Promise<ResponseData>;
    static addUserGroup(data: any): Promise<ResponseData>;
    static saveBomReplace(params: {
        id: string;
        versionNumber?: string;
        tabCode: string | number;
        updateRowList?: Record<string, any>[];
        rowList?: Record<string, any>[];
        affectedInstanceIds?: string;
    }): Promise<ResponseData>;
    static uploadAttachment(itemCode: string, files: Record<string, any>, instanceId: string): any;
    static getBatchLifeCycleByInsId(affectedId: string): Promise<ResponseData>;
    static getBatchVersionByInsId(affectedId: string): Promise<ResponseData>;
    static getWorkflowRoles(): Promise<ResponseData>;
    static getApplyObjectId(objectId: any, itemCode: string): Promise<ResponseData>;
    static getTodoTableData(params: {
        pageNo: number;
        pageSize: number;
        sort?: string;
        tenantId?: string;
        tabType: string;
        andQuery?: string;
        orQuery?: string;
        userId?: string;
        waitType?: string;
    }): Promise<ResponseData>;
    static getTodoTabCount(params: {
        tenantId?: string;
        userId?: string;
    }): Promise<ResponseData>;
    static getDepartmentByInstanceId(instanceId: string): Promise<ResponseData>;
    static getConfigFormats(data?: any): Promise<ResponseData>;
    static getChangeTabCount(params: any): Promise<ResponseData>;
    static getOtherChangeTabCount(params: any): Promise<ResponseData>;
    static doubleCanEdit(changeInsId: string, insIdPath: string, tabCode: any, workflowId: any): Promise<ResponseData>;
    static designCheckout({ insId, fileSize, changeInsId, checkoutBy, insName, }: {
        insId: string | undefined;
        fileSize?: string | undefined;
        changeInsId?: string;
        checkoutBy?: string;
        insName?: string;
    }): Promise<ResponseData>;
    static designCancelCheckout(insId: any, changeInsId?: string): Promise<ResponseData>;
    static designCheckin(params: {
        insId: any;
        insUrl?: string;
        insSize?: string;
        changeInsId?: string;
        insName?: string;
    }): Promise<ResponseData>;
    static getVersionList(insId: string): Promise<ResponseData>;
    static getWfWorkflowNodeName(nodeId: string): Promise<ResponseData>;
    static canCreateInChange(affectInsId: any, changeItemCode: string): Promise<ResponseData>;
    static canCreateProduct(userId: string): Promise<ResponseData>;
    static exportSpectrum(data?: any): Promise<ResponseData>;
    static timeAxis(data: any): Promise<ResponseData>;
    static commitInstance(data: any): Promise<ResponseData>;
    static planUploadExcel(data: any): Promise<ResponseData>;
    static getTeamUserList(params: any): Promise<ResponseData>;
    static getCalendarData(): Promise<ResponseData>;
    static getItemsByItemCode(itemCode: string): Promise<ResponseData>;
    static checkAndImport(data: any): Promise<ResponseData>;
    static checkAndImportInstance(data: any): Promise<ResponseData>;
    static checkColumn(params: any): Promise<any>;
    static instanceUploadExcel(data: any): Promise<any>;
    static getFileBase(fileKey: any): Promise<any>;
    static downloadFile(params: any): Promise<import("umi-request").RequestResponse<any>>;
    static getDataTypeByCode(itemCode: string, tabCode: string): Promise<any>;
    static getRolesByCurrentUser(): Promise<ResponseData>;
    static getInstances(params: any): Promise<ResponseData>;
    static getOnlineEditParams(params: any): Promise<any>;
    static getOnlineEditInsParams(params: any): Promise<any>;
    static getUser(token: string): Promise<any>;
    static getExtensionById(id: string): Promise<any>;
    static getObjectClassAndCount(itemCodes: string): Promise<any>;
    static getUrl(url: string, responseType?: 'arrayBuffer' | 'blob'): Promise<any>;
    static getImage(url: string, responseType?: 'arrayBuffer' | 'blob'): Promise<any>;
    static exportInstanceData(params: any): Promise<any>;
    static checkTabAddData(params: {
        itemCode: string;
        tabCode: any;
        ids: string;
    }): Promise<any>;
    /**
     * 查询子分类的编码规则是否为配置类型
     * @param objId
     * @returns
     */
    static getCodeRule(objId: string): Promise<any>;
    /**
     * 根据id查询实例数据
     * @param objId
     * @returns
     */
    static getInStanceByIds(ids: string): Promise<any>;
    /**
     * 判断物料关联的设计文件在不在变更中
     * @param objId
     * @returns
     */
    static checkInstanceDiffWorkflow({ changeInsId, ids, itemCode }: {
        changeInsId: string;
        ids: string;
        itemCode: string;
    }): Promise<any>;
    /** 查询委托用户 */
    static delegate(params: {
        /** 用户 */
        userIdList: string[];
        /** 当前实例id */
        insId: string;
        /** 操作类型 添加审批人 : addApprover | 转签 : transsign | 替换 : replace */
        optType: 'addApprover' | 'transsign' | 'replace';
    }): Promise<ResponseData>;
    static getInsIdsByNumber(params: {
        numbers: string[];
    }): Promise<ResponseData>;
    static batchCreateStructure(params: {
        userId: string;
        itemCode: string;
        tabCode: string;
        instances: any;
    }): Promise<ResponseData>;
    static getPublishData(params: {
        userId: string;
        instanceNumber: string;
    }): Promise<ResponseData>;
    static addAnnotation(params: {
        instanceId: string;
        changeInstanceId: string;
        annotations: any;
    }): Promise<ResponseData>;
    static queryAnnotation(params: {
        instanceId: string;
        changeInstanceId: string;
    }): Promise<ResponseData>;
    static getAttrMap(params: {
        itemCode: string;
        tabCode: string;
    }): Promise<any>;
    static getTokenByRefresh(): Promise<ResponseData>;
    static refreshRequest(httpRequest: any): Promise<ResponseData>;
    static retryRequest(httpRequest: any): Promise<ResponseData>;
    /** 获取首页任务数量 */
    static getHomeProjectDodoCount(params: {
        isMine?: boolean;
    }): Promise<ResponseData>;
    /** 获取首页任务数量 */
    static getHomeTaskDodoCount(params: {
        /** isMine传参是“我执行的任务”的状态统计，不传则是“待执行任务”的状态统计 */ isMine?: boolean;
    }): Promise<ResponseData>;
    /** 主页待办-我负责的项目/我参与的项目 */
    static getHomeProjectDodoList(params: {
        isMine?: boolean;
    }): Promise<ResponseData>;
    /** 获取首页tab全部数量 */
    static getHomeDodoCount(): Promise<ResponseData>;
    /** 获取当前激活的模块 */
    static getActiveModules(): Promise<ResponseData>;
}
