import { ResponseData } from '../../typings';
/**
 * @Description 列表
 * @Author ripple
 */
export default class ProductService {
    static getPageList(url: string, params?: any, opendata?: boolean): Promise<ResponseData>;
    static addProduct(data: any): Promise<ResponseData>;
    static getProductList(data: any): Promise<ResponseData>;
    static getProductDetails(data: any): Promise<ResponseData>;
    static getProductGetList(data?: any): Promise<ResponseData>;
    static getProductEdit(data: any): Promise<ResponseData>;
    static getFolderList(data: any): Promise<ResponseData>;
    static getFolderInstanceList(data: any): Promise<ResponseData>;
    static exportProductFolderInstance(data: any): Promise<ResponseData>;
    static addProductFolder(data: any): Promise<ResponseData>;
    static opendataInstances(data: any): Promise<ResponseData>;
    static getInstance(data: any): Promise<ResponseData>;
    static findProductFolderById(data: any): Promise<ResponseData>;
    static folderInstanceAdd(data: any): Promise<ResponseData>;
    static deleteFolderOrIns(data: any): Promise<ResponseData>;
    static folderInstanceStick(data: any): Promise<ResponseData>;
    static folderEdit(data: any): Promise<ResponseData>;
    static fileUpload(data: any): Promise<ResponseData>;
    /**
     * 批量上传的附件上传
     * @param data
     * @returns
     */
    static fileUploadBatch(data: any): Promise<ResponseData>;
    static saveBorrowingFile(data: any): Promise<ResponseData>;
    /*****附件*****/
    static attachmentCheckOut(data: any): Promise<ResponseData>;
    static attachmentCancelCheckOut(data: any): Promise<ResponseData>;
    static attachmentCheckIn(data: any): Promise<ResponseData>;
    static attachmentVersion(data: any): Promise<ResponseData>;
    static inprocessAttachmentVersion(data: any): Promise<ResponseData>;
    static attachmentDelete(data: any): Promise<ResponseData>;
    static exportFileZip(data: any): Promise<ResponseData>;
    static attachmentInstanceList(data: any): Promise<ResponseData>;
    /**
     * 附件-在线编辑-设置锁定状态-附件
     * @param data
     * @returns
     */
    static editOnlineEditingStatus(data: any): Promise<ResponseData>;
    /**
     * 附件-在线编辑-设置锁定状态-实例
     * @param data
     * @returns
     */
    static editInsOnlineEditingStatus(data: any): Promise<ResponseData>;
    /*****产品分类*****/
    /**
     * 产品分类目录-根据参数列表查询
     * @param params
     * @returns
     */
    static getProductTreeData(params: any): Promise<ResponseData>;
    /**
     * 产品分类目录-添加
     * @param data
     * @returns
     */
    static productTreeAdd(data: any): Promise<ResponseData>;
    /**
     * 产品分类目录-修改
     * @param data
     * @returns
     */
    static productTreeEdit(data: any): Promise<ResponseData>;
    /**
     * 产品分类目录-删除
     * @param data
     * @returns
     */
    static deleteProductTreeData(data: any): Promise<ResponseData>;
    /**
     * 产品分类表格-非根节点目录关联数据查询
     * @param params
     * @returns
     */
    static getProductDirInsIds(params: any): Promise<ResponseData>;
    /**
     * 产品分类-绑定实例
     * @param data
     * @returns
     */
    static productAddInsIdList(data: any): Promise<ResponseData>;
    /**
     * 产品分类-解绑实例
     * @param data
     * @returns
     */
    static productDelInsIdList(data: any): Promise<ResponseData>;
    /*****型谱*****/
    static getSpectrumList(data: any): Promise<ResponseData>;
    static spectrumAdd(data: any): Promise<ResponseData>;
    static spectrumEdit(data: any): Promise<ResponseData>;
    static deleteSpectrum(data: any): Promise<ResponseData>;
    static getAllListt(): Promise<ResponseData>;
    static getSpectrumTree(): Promise<ResponseData>;
    static getProductLineTree(): Promise<ResponseData>;
    static editProductLine(data: any): Promise<ResponseData>;
    static addProductLine(data: any): Promise<ResponseData>;
    static delProductLine(data: any): Promise<ResponseData>;
    static spectrumFindSpectrum(data: any): Promise<ResponseData>;
    static productTeamRoleList(data: any): Promise<ResponseData>;
    static getSurplusRole(data: any): Promise<ResponseData>;
    static productTeamRoleAdd(data: any): Promise<ResponseData>;
    static productTeamRoleEdit(data: any): Promise<ResponseData>;
    static productTeamRoleDelete(data: any): Promise<ResponseData>;
    static saveOrUpdate(data: any): Promise<ResponseData>;
    static getOptionalRules(params: {
        spectrumId: string;
    }): Promise<ResponseData>;
    static getPreviewBut(): Promise<ResponseData>;
    static spectrumCheckInsEdit(data: {
        insId: string;
    }): Promise<ResponseData>;
    static saveBom(data: {
        /** OptionMerge: 合并 | OptionCover: 替换 */
        optType: 'OptionMerge' | 'OptionCover';
        affectedInstanceIds: string;
        id: string;
        itemCode: string | number;
        rowList: any;
        tabCode: string | number;
        versionNumber: string;
        deleteAffectedInstanceIds: string;
        deleteRowIds: string[];
        updateRowList: any[];
    }): Promise<ResponseData & {
        waning: string;
    }>;
    static instanceSaveOrUpdate(data: any): Promise<ResponseData>;
    static findInstanceAccess(data: any): Promise<ResponseData>;
    static getLogList(data: any): Promise<ResponseData>;
    static productDelete(data: any): Promise<ResponseData>;
    static getBiData(data: any): Promise<ResponseData>;
    static saveFileRecord(data: {
        instanceId: string;
        code: string;
        fileName: string;
        fileId: string;
        fileSize: number;
        fileUrl: string;
        tabCode: string;
        /** 类型  0其他 1附件 (可不传 默认为0 为1时会在上传器显示) */
        type: '0' | '1';
        uniqueId: string;
    }[]): Promise<ResponseData>;
    /**
     * 文件上传管理-保存
     * @param params
     *  type类型  0其他 1附件 (可不传 默认为0 为1时会在上传器显示)
     */
    static toPostFileRecord: (params: {
        file: any;
        response: any;
        type: '0' | '1';
    }) => {
        instanceId: string;
        code: string;
        fileName: string;
        fileId: string;
        fileSize: number;
        fileUrl: string;
        tabCode: string;
        /** 类型  0其他 1附件 (可不传 默认为0 为1时会在上传器显示) */
        type: '0' | '1';
        uniqueId: string;
    }[];
    static getFileRecord(data: any): Promise<ResponseData>;
    static deleteFile(data: string[]): Promise<ResponseData>;
    static getSubClassify(data: any): Promise<ResponseData>;
    static postFileCheckName(data: any): Promise<ResponseData>;
    static postAttachmentCheckName(data: any): Promise<ResponseData>;
    static getPreNumbers(data: {
        count: any;
        id: any;
    }): Promise<ResponseData>;
    static postInstances(data: any): Promise<ResponseData>;
    static productTeamRoleExport(data: any): Promise<ResponseData>;
    static exportCompareBom(data: any): Promise<ResponseData>;
    /**********型谱配选**********/
    static getButByParams(itemCode: any, tabCode: any, location?: string): Promise<ResponseData>;
    static getSpectrumInstanceList(data: any): Promise<ResponseData>;
    static spectrumInstanceAdd(data: any): Promise<ResponseData>;
    static batchDataStatus(data: any): Promise<ResponseData>;
    static spectrumInstanceDelete(data: any): Promise<ResponseData>;
    static spectrumRulePage(data: any): Promise<ResponseData>;
    static spectrumRuleAdd(data: any): Promise<ResponseData>;
    static spectrumRuleEdit(data: any): Promise<ResponseData>;
    static spectrumRuleDelete(data: any): Promise<ResponseData>;
    static checkOptionValue(data: any): Promise<any>;
    static itemLibraryInstanceAdd(data: any): Promise<ResponseData>;
    static itemLibraryInstanceDel(data: any): Promise<ResponseData>;
    static libraryBatchDataStatus(data: any): Promise<ResponseData>;
    static exportOption(data: any): Promise<ResponseData>;
}
