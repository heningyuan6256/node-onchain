import { ResponseData } from '../../typings';
/**
 * @Description 列表
 * @Author ripple
 */
export default class UserService {
    static getTabsList(itemCode: string): Promise<ResponseData>;
    static getAttrs(): Promise<ResponseData>;
    static getObjectsItem(itemCode: string): Promise<ResponseData>;
    static getUserGroups(userIds: string): Promise<ResponseData>;
    static getUsersIds(id: string, itemCode: string, tabCode: string): Promise<ResponseData>;
    static update(data: any): Promise<ResponseData>;
    static add(data: any): Promise<ResponseData>;
    static getPriadd(params: any): Promise<ResponseData>;
    static addEscalation(data: any): Promise<ResponseData>;
    static editEscalation(data: any): Promise<ResponseData>;
    static initPassword(data: any): Promise<ResponseData>;
    static deleteInstance(params: any): Promise<ResponseData>;
    static delete(data: any): Promise<ResponseData>;
    static treeAsync(params: any): Promise<ResponseData>;
    static treeList(): Promise<ResponseData>;
    static conditionsNopage(): Promise<ResponseData>;
    static conditionsNoId(ids: string): Promise<ResponseData>;
    static conditionsByItemCodes(itemCodes: Array<string>): Promise<ResponseData>;
    static getDefRole(): Promise<ResponseData>;
    static whereroleData(data: any): Promise<ResponseData>;
    static getAttributes(itemCode: any, tabCode: any): Promise<ResponseData>;
    static getUserId(id: any): Promise<ResponseData>;
    static getUserQueryById(id: string, itemCode: string, tabCode: string, isJurisdiction: boolean): Promise<ResponseData>;
    static getUserGroupId(id: string, itemCode: string, tabCode: string, isJurisdiction: boolean): Promise<ResponseData>;
    static editUser(data: any): Promise<ResponseData>;
    static editUserGroup(data: any): Promise<ResponseData>;
    static getRoleByUser(params: any): Promise<ResponseData>;
    static getItemCodeById(id: any): Promise<ResponseData>;
    static deleteUserwhererole(params: any): Promise<ResponseData>;
    static getRoles(params: any): Promise<ResponseData>;
    static getRoleByUsergrouId(id: string, itemCode: any, tabCode: any, isJurisdiction?: boolean): Promise<ResponseData>;
    static deleteUsergrou(params: any): Promise<ResponseData>;
    static deleteUser(params: any): Promise<ResponseData>;
    static getusergroupList(params: any): Promise<ResponseData>;
    static getAllInsByDirectory(data: any): Promise<ResponseData>;
    static getusersList(params: any): Promise<ResponseData>;
    static getusergroupsList(params: any): Promise<ResponseData>;
    static getusergrouData(data: any): Promise<ResponseData>;
    static getuserData(data: any): Promise<ResponseData>;
    static deleteLogicDelete(params: any): Promise<ResponseData>;
    static deleteLogicGroupDelete(params: any): Promise<ResponseData>;
    static disableUser(data: any): Promise<ResponseData>;
    static disableUserGroup(data: any): Promise<ResponseData>;
    static getusersgrouList(params: any): Promise<ResponseData>;
    static getListByCodes(data: any): Promise<ResponseData>;
    static getescalaList(params: any): Promise<ResponseData>;
    static deleteescala(params: any): Promise<ResponseData>;
    static rulesNopage(code: any): Promise<ResponseData>;
    static getUserLogs(data: any): Promise<ResponseData>;
    /**
     * 前台页面导入工具按钮权限判断
     * @returns
     */
    static getUserOperationsPermissions(): Promise<ResponseData>;
    /** 我最近工作的数据 */
    static getMyRecentData(): Promise<ResponseData>;
}
