/// <reference types="react" />
import { contentProps } from '../../components/PlmFormItem';
import { PlmTableColumnProps } from '../../components/PlmTable';
import { APP } from '../../typings';
import { BasicsAttribute } from '../attribute';
import { LinkInstanceHighLight, MapManagement as MapMgt } from './const';
export { MapManagement } from './const';
export declare function getAttrsToColumns<A = string>(pdmAttributeCustomizedVoList: BasicsAttribute<A>[], forEach?: (attr: BasicsAttribute<A>, index: number) => void): BasicsAttribute<A>[];
interface ListCodeRequestParams {
    code: any;
    where?: string;
    [k: string]: any;
}
export declare function getListCodeRequestParams<A = string>(filterColumns: BasicsAttribute<A>[], fn?: (item: BasicsAttribute<A>, index: number) => ListCodeRequestParams): ListCodeRequestParams[];
export interface ColumnRender {
    (params: {
        attr: BasicsAttribute;
        formItem: contentProps;
        extra: GenerateRenderExtra;
    }, value: any, record: Record<string, any>, index: number): React.ReactNode;
}
declare class BisTableColumns {
    static isOwnFormItem(attr: BasicsAttribute): boolean;
    /**
     * @description 获取row itemCode
     * @date 2023-02-06 11:39:59
     * @static
     * @param {Record<string, any>} data 表格row数据
     * @returns {*}
     * @memberof InitTableColumns
     */
    static getItemCode(data: Record<string, any>): any;
    /**
     * @description 获取row实例Id的属性名称
     * @date 2023-02-06 13:43:47
     * @static
     * @param {Record<string, any>} data 表格row数据
     * @memberof BisTableColumns
     */
    static getInstAttrName(): string;
}
export declare class InitTableColumns extends BisTableColumns {
    static generateFormItem({ item, serverListCodeMap, instanceInfo, extraProps, }: {
        instanceInfo: APP.ProjectInstance;
        item: BasicsAttribute;
        serverListCodeMap: Record<string, any>;
        extraProps?: {
            props?: Record<string, any>;
            [k: string]: any;
        };
    }): Record<string, any>;
    static generateDataIndex(attr: BasicsAttribute): string;
    static generateWidth(attr: BasicsAttribute): number;
    static generateFormItemState(attr: BasicsAttribute, filter?: (apiCode: string, index: number) => boolean): boolean;
    static generateFixed(attr: BasicsAttribute, fixedApiCode?: string[]): boolean;
    static generateViewColState({ attr, canViewColumnMap }: {
        attr: BasicsAttribute;
        canViewColumnMap: Record<string, any>;
    }): boolean;
    static generateRender(attr: BasicsAttribute, extra: GenerateRenderExtra, options: ColumnRenderOption<GenerateRenderExtra>[], formItem: contentProps): ((value: any, record: Record<string, any>, index: number) => import("react").ReactNode) | undefined;
    static generateTitle(attr: BasicsAttribute, title?: () => React.ReactNode): import("react").ReactNode;
    static generateAlign(attr: BasicsAttribute): undefined;
    static generateSorter(attr: BasicsAttribute): boolean;
    static generateSearch(attr: BasicsAttribute, listCodeMap: Record<string, any>): contentProps;
    static generateIsUser(attr: BasicsAttribute): true | undefined;
    static generateIsVersion(attr: BasicsAttribute): undefined;
    static generateRequired(attr: BasicsAttribute): boolean;
    static generateOnCell(attr: BasicsAttribute): undefined;
    static generateSort(attr: BasicsAttribute): number;
}
export interface ColumnRenderOption<T = GenerateRenderExtra, ApiCode = string> {
    condition: (attr: BasicsAttribute, extra: T) => boolean;
    render: ColumnRender;
}
export interface GenerateRenderExtra {
    instanceInfo: Record<string, any>;
    tabInfo: Record<string, any>;
    dataIndex: string;
}
export interface PageProps {
    instanceInfo: Record<string, any>;
    tabInfo: Record<string, any>;
}
interface CustomColAttrFn<T, ApiCode = string> {
    (defaultValue: T, attr: BasicsAttribute<ApiCode>): T;
}
export interface GenerateColumnsProps<ApiCode = string> extends PageProps {
    canViewColumnMap: Record<string, any>;
    canEditColumnMap: Record<string, any>;
    pdmAttributeCustomizedVoList: BasicsAttribute<ApiCode>[];
    initialState: APP.InitialState;
    /** 是否使用受控属性 */
    isUseControl?: boolean;
    /** 是否忽略读取编辑权限控制 */
    isIgnoreReadEditControl?: boolean;
    isPreview?: boolean;
    commonButtonStatus?: boolean;
    extraRequestListCode?: ListCodeRequestParams[];
    generate: {
        /** 是否使用 formItem */
        isOwnFormItem?: (attr: BasicsAttribute<ApiCode>) => boolean;
        /** 获取渲染函数 配置 或者 参数 */
        renderOption?: () => {
            options?: ColumnRenderOption<GenerateRenderExtra, ApiCode>[];
            getRenderOptionParams?: {
                bomReplaceNumber?: number;
                linkInstanceHighLight?: LinkInstanceHighLight;
            };
        };
        /** form 是否被禁止使用 */
        getFormItemDisabledStatus?: CustomColAttrFn<boolean, ApiCode>;
        getInstIdAttrName?: CustomColAttrFn<string, ApiCode>;
        title?: CustomColAttrFn<React.ReactNode, ApiCode>;
        dataIndex?: CustomColAttrFn<string, ApiCode>;
        width?: CustomColAttrFn<number, ApiCode>;
        editable?: CustomColAttrFn<boolean, ApiCode>;
        fixed?: CustomColAttrFn<boolean, ApiCode>;
        canNotView?: CustomColAttrFn<boolean, ApiCode>;
        align?: CustomColAttrFn<'left' | 'right' | 'center' | undefined, ApiCode>;
        sorter?: CustomColAttrFn<boolean, ApiCode>;
        search?: CustomColAttrFn<contentProps | undefined, ApiCode>;
        isUser?: CustomColAttrFn<boolean | undefined, ApiCode>;
        isVersion?: CustomColAttrFn<boolean | undefined, ApiCode>;
        isRequired?: CustomColAttrFn<boolean | undefined, ApiCode>;
        onCell?: CustomColAttrFn<((record: any, ...params: any[]) => any) | undefined, ApiCode>;
        sort?: CustomColAttrFn<number, ApiCode>;
        /** 自定义列头的 form 属性 */
        getFormItemExtraProps?: (params: {
            attr: BasicsAttribute<ApiCode>;
            listCodeMap: Record<string, Record<string, any>[]>;
        }) => Record<string, any>;
    };
    attrForEach?: (attr: BasicsAttribute<ApiCode>, index: number) => void;
}
export declare function generateColumns<A = string>({ instanceInfo, tabInfo, initialState, attrForEach, pdmAttributeCustomizedVoList, canViewColumnMap, canEditColumnMap, generate, commonButtonStatus, extraRequestListCode, isUseControl, isIgnoreReadEditControl, isPreview, }: GenerateColumnsProps<A>): Promise<{
    columns: PlmTableColumnProps;
    mapMgt: MapMgt<{
        colApiCodeIdMap: any;
        colApiCodeDataFromIdMap: any;
        listCodeMap: Record<string, any>;
    }>;
}>;
