/// <reference types="react" />
import { PlmLinkInstanceProp } from '../../components/PlmLinkInstance';
import { APP } from '../../typings';
import { BasicsAttribute } from '../attribute';
import { ColumnRenderOption, PageProps } from '.';
export declare class MapManagement<T = Record<string, Record<string, any>>> {
    map: T;
    static getDefaultParams(): {
        colApiCodeIdMap: Record<string, any>;
        colApiCodeDataFromIdMap: Record<string, any>;
        listCodeMap: Record<string, any>;
    };
    constructor(multipleMap: T);
    getMap(key: keyof T): T[keyof T];
    getValues(key: keyof T, attrNames: string[]): any[];
}
interface RenderProps {
    data: any;
    record: Record<string, any>;
    index?: number;
}
export declare const VarianceRender: React.FC<RenderProps & {
    keys: [string, string];
}>;
export interface LinkInstanceHighLight {
    numberHighLight: string[];
}
export declare const LinkInstanceRender: React.FC<RenderProps & {
    id: string;
    itemCode: string;
    objectIconMaps: Record<string, any>;
    linkInstanceHighLight?: LinkInstanceHighLight;
    isHideIcon?: boolean;
    linkInstanceProps?: Partial<PlmLinkInstanceProp>;
}>;
export declare const BomManufacturePartsRender: React.FC<RenderProps>;
export declare const QtyBomReplaceRender: React.FC<RenderProps & {
    apiCodeIdMap: Record<string, any>;
    bomReplaceNumber?: number;
}>;
export declare const LifeCyclePhaseRender: React.FC<RenderProps & {
    apiCodeIdMap?: Record<string, any>;
    type?: 'simplicity';
}>;
export declare const OldLifePhaseRender: React.FC<RenderProps & {
    oldLifeId?: string;
}>;
export declare const CheckoutStatusRender: React.FC<RenderProps>;
export declare const RevisionRender: React.FC<RenderProps & {
    apiCodeIdMap: Record<string, any>;
    attr: BasicsAttribute;
}>;
export declare const OldVersionRender: React.FC<RenderProps & {
    type?: 'statusChange';
    statusChangeVersionId: string;
}>;
export declare const FileSizeRender: React.FC<RenderProps & {
    attr: BasicsAttribute;
    apiCodeIdMap: Record<string, any>;
}>;
export declare const VersionRender: React.FC<RenderProps & {
    apiCodeIdMap: Record<string, any>;
}>;
declare const getDefaultParams: typeof MapManagement.getDefaultParams;
interface InitRenderProps {
    /** 映射管理 */
    mapMgt: MapManagement<ReturnType<typeof getDefaultParams>>;
    /** bom替代料 */
    bomReplaceNumber?: number;
    linkInstanceHighLight?: {
        numberHighLight: string[];
    };
    getInsId: (column: any) => string;
    getItemCode: (record: any, column: any) => any;
    initialState?: APP.InitialState;
}
export declare const getRenderOption: ({ mapMgt, bomReplaceNumber, getInsId, getItemCode, linkInstanceHighLight, initialState }: InitRenderProps) => ColumnRenderOption<import('.').GenerateRenderExtra, string>[];
export declare const getTitleDefaultNode: ({ instanceInfo, tabInfo, attr }: PageProps & {
    attr: BasicsAttribute;
}) => import("react").ReactNode;
/**  */
export declare function getOldLifePhaseAndVersionRender({ column, }: {
    /** 列数据 */
    column: {
        oldLife: Record<string, any>;
        statusChangeVersion: Record<string, any>;
        [k: string]: Record<string, any>;
    };
}): ColumnRenderOption<import('.').GenerateRenderExtra, string>[];
export {};
