import { PlmTask } from '../../components/PlmGantt/utils/type';
import { APP } from '../../typings';
import moment, { Moment } from 'moment';
import { BasicsAttribute } from '../attribute';
import { UserIdentity } from '../userIdentity';
import { HealthStatus, ProjectStatus, ProjectSubset } from './const';
import { TabInfo } from '../../hooks/useTabInfo/type';
type Task = APP.ProjectInstance | PlmTask;
export declare enum ProjectChange {
    /** 项目启动流程 */
    ProjectStartOrder = "ProjectStartOrder",
    /** 项目基线变更 */
    ProjectBaselineOrder = "ProjectBaselineOrder"
}
export declare enum BudgetEditTypeApiCode {
    /** 自上而下 */
    Ascending = "Ascending",
    /** 自下而上 */
    Descending = "Descending"
}
/** 健康状态listCode */
export declare const HEALTH_LIST_CODE = "10005228";
/** 角色listCode */
export declare const ROLE_LIST_CODE = 10005271;
/** 项目状态listCode */
export declare const PROJECT_STATUS_LIST_CODE = 10005247;
export interface HealthStatusObject extends APP.CodeItemList {
    apicode: HealthStatus;
}
/** 获取项目子集图标 */
export declare function getProjectIcon(item: Record<string, any>, key?: string): string;
export declare class ProjectGeneral {
    private result;
    projectOptionMap: {
        value: string;
        apicode: string;
        label: string;
    }[];
    value: string;
    label: string;
    apicode: ProjectSubset;
    objectId: string | number;
    itemCode: string | number;
    constructor(itemCode: string | number, objectId: string | number);
    /** 暴露数据请求队列 */
    get requestResult(): Promise<any>;
    /** 是否是项目集 */
    get isProgram(): boolean;
    /** 是否是项目 */
    get isProject(): boolean;
    /** 是否是迭代 */
    get isIteration(): boolean;
    /** 是否是阶段 */
    get isPhase(): boolean;
    /** 是否是里程碑 */
    get isMilestone(): boolean;
    /** 是否是任务 */
    get isTask(): boolean;
    getProjectInstanceType(instance: Record<string, any>, apiCodeIdMap: Record<string, any>): ProjectSubset | undefined;
}
export interface ForbiddenTime {
    /** 时间节点 */
    date?: number | string;
    /** 1: 小于 date; 2: 小于等于date; 3: 大于 date; 4: 大于等于date; 5: 等于 date; */
    type?: 0 | 1 | 2 | 3 | 4 | 5;
    /** 是否是工作日 */
    isWorkTime?: PlmProject.GanttCalendarInstance<moment.Moment>['isWorkTime'];
}
export declare function forbiddenTime(config: ForbiddenTime | ForbiddenTime[], value: Moment): boolean | undefined;
export type DateType = number | string | Date | Moment;
declare class ProjectFormatDate {
    format: string;
    start: string;
    end: string;
    defaultStart: string;
    defaultEnd: string;
    get serviceStart(): string;
    get serviceEnd(): string;
    get webStart(): string;
    get webEnd(): string;
    get short(): string;
    setTime(start: string, end: string): void;
    getTime(start: string, end: string): {
        start: string;
        end: string;
    };
    private formatting;
    /** 将 01 08:00 - 01 17:00 转为 01 00:00 - 01 24:00 */
    toActualDateString(start: DateType, end: DateType): {
        start: {
            string: string;
            mom: moment.Moment;
        };
        end: {
            string: string;
            mom: moment.Moment;
        };
    };
    /** 将 01 xx:xx - 01 xx:xx 转为 01 08:00 - 01 17:00; isSpan: 表示将第二天凌晨0点转为前一天的17点 */
    toServeDateString(start: DateType, end: DateType, extra?: {
        isSpan?: boolean;
        format?: {
            start?: string;
            end?: string;
            isCompulsory?: boolean;
        };
    }): {
        start: {
            string: string;
            mom: moment.Moment;
        };
        end: {
            string: string;
            mom: moment.Moment;
        };
    };
    toGanttDateString(start: DateType, end: DateType): {
        start: {
            string: string;
            mom: moment.Moment;
        };
        end: {
            string: string;
            mom: moment.Moment;
        };
    };
    getShort(str: string): string;
}
export declare const projectFormatDate: ProjectFormatDate;
export declare const getWeekFormat: (type: '星期' | '周', week: number) => string;
declare class ProjectUtility {
    /** 获取实例的项目ID */
    getInstanceProjectId(instance: Record<string, any>): string;
    /** 获取实例 project 上的属性值 */
    getProjectAttrValue<T extends keyof APP.Project>(instance: Record<string, any>, key: T): APP.Project[T];
    /** 获取实例 projectGeneral 上的属性值 */
    getProjectGeneralAttrValue<T extends keyof ProjectGeneral>(instance: Record<string, any>, key: T): ProjectGeneral[T];
    /** 获取实例 projectStatusExample 上的属性值 */
    getProjectStatusExampleAttrValue<T extends keyof ProjectStatusExample>(instance: Record<string, any>, key: T): ProjectStatusExample[T];
    /** 获取 project 子集实例上的属性值 */
    getInstanceAttrValue<T extends keyof PlmProject.DataSourceItem>(row: any, key: T): PlmProject.DataSourceItem[T];
    /** 是否显示审批按钮 */
    isShowApprovalButton(instance: Record<string, any>): boolean;
    /** 计算健康状态 */
    getStateHealth(task: Task, apicodeIdMap: Record<string, any>, scheduleEndDate?: string): HealthStatus;
    /** 获取项目类型对象 */
    getProjectTypeObject(objectMap: any[], value: ProjectSubset, key?: string): PlmProject.ObjectItem<ProjectSubset> | undefined;
    /** 获取时间差距 */
    getDeviation(planDate: any, date: any): number | "~#~";
    /** 是否是自上而下 */
    isTopDown(list: APP.BudgetEditType<BudgetEditTypeApiCode>[], id: APP.BudgetEditType['id']): boolean;
    /** 获取项目 DateFormat */
    getFormat(apicode: string, instance: APP.ProjectInstance): string | undefined;
    /** 是否是项目经理 */
    isProjectManager(task: Task, userId?: string): boolean;
    /** 是否在草稿版本 */
    isDraftVersion(task: Task, extra?: {
        useLatestVersion: true;
    }): boolean;
    /** 是否是签出状态 */
    isCheckout(task: any): boolean;
    /** 是否有父级版次 */
    isHasProjectVersionOrder(task: Task): boolean;
    /** 是否在变更中删除 （需要判断有父版次才判断） */
    isChangingDelete(task: Task): boolean;
    isLatestVersion(task?: Task, currentVersion?: string): boolean;
    /** 是否是草稿状态 */
    isDraft(instance: Task): boolean;
    /** 是否是开始状态 */
    /** 是否是启动后 */
    isStarted(instance: Task): boolean;
    /** 是否是启动状态 */
    isStart(instance: Task): boolean;
    /** 是否是执行中状态 */
    isRun(instance: Task): boolean;
    /** 是否是结束状态 (已完成) */
    isEnd(instance: Task): boolean;
    /** 是否是冻结 (完成、结项、暂停、取消其中的一种) */
    isFrozen(instance: Task): boolean;
    /** 提交失败，前置任务未完成 */
    get preError(): string;
    /** 提交失败，前置任务未完成 */
    get targetDeliveryError(): string;
    /** 提交失败，前置任务未完成 */
    get processDeleteError(): string;
    taskWorkflowSubmit(instance: {
        insId: string;
        project?: any;
    } | APP.ProjectInstance, submit: () => void, extra?: {
        targetDeliveryComplete?: boolean;
        preComplete?: boolean;
        onBeforeAwait?: () => void;
        onError?: () => void;
    }): Promise<boolean | undefined>;
    /** 当前实例正在基线变更中，无法点击 */
    get baselineBeChangeError(): string;
    /** 当前实例正在变更中，无法点击 */
    get changeError(): string;
    /** 当前实例正在已签出，无法点击 */
    get checkoutError(): string;
    /** 基线、签出状态按钮是否能使用 */
    getButtonEnabled(inst: any): boolean;
    /** 基线、签出状态按钮禁用提示 */
    getButtonDisabledTips(inst: any): string;
    /** 当前项目没有子任务，无法点击 */
    projectHasNoSubTasksError(apicode: string): string;
    /** 是否在变更中 */
    isChanging(inst: any): boolean;
    /** 是否在状态变更过流程中 */
    isStateBeChange(inst: any): boolean;
    /** 是否在基线变更过流程中 */
    isBaselineBeChange(inst: any): boolean;
    /** 是否是里程碑不能编辑的属性 */
    isMilestoneCanNotEditAttr(apicode: string): boolean;
    /** 是否有使用了 currentUser 权限 */
    isUseUserAuth(apicode: string): boolean;
    /** 获取当前转移过程中的目标用户id */
    getTransferUnderwayOwner(instance: Task, attr?: BasicsAttribute): string | undefined;
    /** 当前实例是否在转移所有者的过程中 */
    isTransferOwnerUnderway(instance: Task, attr?: BasicsAttribute): boolean;
}
export declare class ProjectStatusExample {
    id: string;
    apicode: ProjectStatus;
    name: string;
    list: Record<string, any>[];
    constructor(instance: Task);
    /** 是否是草稿 */
    get isDraft(): boolean;
    /** 是否是启动状态 */
    get isStart(): boolean;
    /** 是否是执行中状态 */
    get isWorking(): boolean;
    /** 是否是完成状态 */
    get isFinish(): boolean;
    /** 是否是结项状态 */
    get isClose(): boolean;
    /** 是否是暂停状态 */
    get isPause(): boolean;
    /** 是否是取消状态 */
    get isCancel(): boolean;
    /** 是否是冻结状态 (完成、结项、暂停、取消其中的一种) */
    get isFrozen(): boolean;
    /** 是否是停用 (结项、取消其中的一种) */
    get isStopUsing(): boolean;
}
export declare class ProjectEditAuthority {
    isPageInst: boolean;
    apiCodeIdMap: Record<string, string>;
    /** 是否是实施项目 */
    isPutIntoEffect: boolean;
    instance: APP.ProjectInstance;
    updateInstanceVo: Record<string, any>;
    currentUserIdentity: UserIdentity | undefined;
    personality: APP.Personality | null;
    currentUserId: string;
    loading: Promise<any>;
    constructor(params: {
        /** 是否是实施项目页 */
        isPutIntoEffect: boolean;
        instance: APP.ProjectInstance;
        apiCodeIdMap: ProjectEditAuthority['apiCodeIdMap'];
        updateInstanceVo: Record<string, any>;
        /** 是否是页面顶部实例 */
        isPageInst: ProjectEditAuthority['isPageInst'];
        currentUser?: Record<string, any>;
        personality?: APP.Personality | null;
    });
    attrBaseAuthority({ attr, updateInstanceVo }: {
        attr: BasicsAttribute;
        updateInstanceVo?: Record<string, any>;
    }): boolean;
    updateUser(): Promise<void>;
    isPageInstance(task: Task): task is APP.ProjectInstance;
    /** 是否有子节点 */
    hasChildNodes(task: Task): boolean;
    /** 是否处于实施项目页签中 */
    isChangePageProcess(task: Task): boolean;
    /** 是否在 变更流程中当不在实施页签中 */
    isNotChangePageProcess(task: Task): boolean;
    /** 是否是签出状态 */
    isCheckout(task: Task): boolean;
    /** 是否在草稿版本 */
    isDraftVersion(task: Task): boolean;
    /** 是否是升版后的 */
    isUpgradeVersionAfter(task: Task): boolean;
    /** 是否在变更中 */
    isChangeIng(task: Task): boolean;
    /**
     * 是否是项目管理员或者是超级管理员
     * - 如果有属性有使用这个权限，请更新 {@link projectUtility} isUseUserAuth 方法内的判断，目的是为了保证获取的权限是实时的
     * - 如果公有属性内有属性权限判断，在使用这个方法，请保证属性在点击编辑时，获取最新的权限
     * - src/components/PlmBasicAttribute/index.tsx
     *   src/components/PlmChangeBasicAttrs/index.tsx
     *   src/components/PlmGantt/inst-details/attr/index.tsx
     *   上面个组件内 handleClick 方法内有关联
     */
    isProjectAdminOrSuperAdmin(): boolean;
    /**
     *是否是项目管理员
     * - 如果有属性有使用这个权限，请更新 {@link projectUtility} isUseUserAuth 方法内的判断，目的是为了保证获取的权限是实时的
     * - 如果公有属性内有属性权限判断，在使用这个方法，请保证属性在点击编辑时，获取最新的权限
     * - src/components/PlmBasicAttribute/index.tsx
     *   src/components/PlmChangeBasicAttrs/index.tsx
     *   src/components/PlmGantt/inst-details/attr/index.tsx
     *   上面个组件内 handleClick 方法内有关联
     */
    isProjectAdmin(): boolean;
    /**
     * 是否是超级管理员
     * - 如果有属性有使用这个权限，请更新 {@link projectUtility} isUseUserAuth 方法内的判断，目的是为了保证获取的权限是实时的
     * - 如果公有属性内有属性权限判断，在使用这个方法，请保证属性在点击编辑时，获取最新的权限
     * - src/components/PlmBasicAttribute/index.tsx
     *   src/components/PlmChangeBasicAttrs/index.tsx
     *   src/components/PlmGantt/inst-details/attr/index.tsx
     *   上面个组件内 handleClick 方法内有关联
     */
    isSuperAdmin(): boolean;
    /** 是否是项目经理 */
    isProjectManager(task: Task): boolean;
    /** 是否是的所有者 */
    isOwner(task: Task): boolean;
    /** 是否是自上而下 */
    isTopDown(): boolean;
    /** 是否是模板 */
    isTemplate(): boolean;
    /** 是否有科目费用 */
    isHasSubjectCost(): boolean | undefined;
    getCurrentExampleCode(task: Task): ProjectStatus;
    /** true 能够编辑 | false 不能编辑 */
    getEditState(params: {
        apiCode: string;
        task: Task;
        extra: {
            /** 是否是在table行内编辑 */
            isInlineEdit?: boolean;
            /** 是否提前处理费用输入 */
            isAdvanceVerify?: boolean;
            /** 属性 */
            attr: BasicsAttribute;
            /** apicode 映射 id */
            apiCodeIdMap?: Record<string, any>;
            /** 更新权限对象 */
            updateInstanceVo?: Record<string, any>;
            /** 页签信息  */
            tabInfo?: TabInfo;
            /** 是否是项目费用-科目费用页签 */
            isSubjectChargePage?: boolean;
        };
    }): any;
}
export declare const projectUtility: ProjectUtility;
export declare const useProjectAttr: ({ exeCondition, instances, designationFind, }: {
    exeCondition: () => boolean;
    designationFind?: ((attr: BasicsAttribute, index: number) => boolean) | undefined;
    instances: APP.instanceInfoType[];
}) => {
    designationAttr: BasicsAttribute<string> | undefined;
    attrs: BasicsAttribute<string>[];
};
/** 输入框带 % */
export declare const inputPercentage: {
    formatter: (value: any, info?: any) => any;
    parser: (value: string | undefined) => any;
};
/** 输入框带 h */
export declare const inputHour: {
    formatter: (value: any, info?: any) => any;
    parser: (value: string | undefined) => any;
};
export {};
