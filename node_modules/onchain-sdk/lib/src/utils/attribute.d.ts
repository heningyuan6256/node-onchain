export interface BasicsAttribute<ApiCode = string> {
    id: string;
    name: string;
    description: string;
    apicode: ApiCode;
    status: boolean;
    valueType: string;
    defValue: string;
    required: boolean;
    controlled: any;
    delFlag: number;
    createTime: string;
    createBy: string;
    updateTime: string;
    updateBy: string;
    allowMultiple: any;
    itemCode: number;
    tabCode: number;
    readonly: string;
    bomVisible: boolean;
    explanation: string;
    defView: boolean;
    fieldHeight: any;
    allowLength: any;
    maxLength: any;
    allowDigits: any;
    minValue: any;
    maxValue: any;
    allowZero: any;
    dateFormat: string;
    displayFormat: string;
    listType: string;
    listCode: any;
    dateRule: string;
    allowFileSize: any;
    allowFileType: string;
    dynamicTable: string;
    initLineCount: any;
    allowDuplication: any;
    displayRule: string;
    dataFrom: '0' | '1' | '2';
    dataFromId: string;
    sort: number;
    canMove: any;
    showDescription: any;
    fileName: string;
    textRule: string;
    display: boolean;
    canNotEdit: boolean;
    [k: string]: any;
}
export declare class Attribute {
    /** 根据 dataFrom 类型读取指定 属性id */
    static getAttributesMapId(attr: BasicsAttribute, quoteMultipleKey?: 'id' | 'dataFromId'): string;
    /** 是否是自定义属性 */
    static isCustomAttr(attr: BasicsAttribute): boolean;
    /** 是否是引用属性 */
    static isQuoteAttr(attr: BasicsAttribute): boolean;
    /** 是否是引用多种类型的实例 */
    static isQuoteMultipleTypesAttr(attr: BasicsAttribute): boolean;
    /** 实例上是否有某个属性 */
    static hasAttr(object: Record<string, any> | undefined, attr: string): boolean | undefined;
}
export declare enum AttrReadonly {
}
export declare enum AttrValueType {
}
