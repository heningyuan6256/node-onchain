import { APP } from '../typings';
export declare const initInstance: (extraParams?: {
    version?: string;
    versionOrder?: string;
    isCurrentInstance?: boolean;
    /** 是否获取项目日历详情 (必须是`false`才不会获取日历详情)  */
    getProjectCalendar?: boolean;
    /** 是否获取实例页签 (必须是`false`才不会获取实例页签)  */
    getTabs?: boolean;
    /** 是否获取实例页签的Count (必须是`false`才不会实例页签的Count)  */
    getTabsCount?: boolean;
}, instId?: string) => Promise<any>;
export declare const dealWorkflowData: (result: any) => {
    workflowNodes: any;
    workflowInstance: any;
    workflowNodesThumb: any;
};
export declare function findKey(value: any, compare: ((a: any, b: any) => boolean) | undefined, orderVersionMap: Record<string, any>): string;
export default function instance(): {
    instanceInfo: APP.instanceInfoType<string> | undefined;
    loading: Boolean;
    initInstance: (extraParams?: {
        version?: string | undefined;
        versionOrder?: string | undefined;
        isCurrentInstance?: boolean | undefined;
        /** 是否获取项目日历详情 (必须是`false`才不会获取日历详情)  */
        getProjectCalendar?: boolean | undefined;
        /** 是否获取实例页签 (必须是`false`才不会获取实例页签)  */
        getTabs?: boolean | undefined;
        /** 是否获取实例页签的Count (必须是`false`才不会实例页签的Count)  */
        getTabsCount?: boolean | undefined;
    } | undefined, instId?: string | undefined) => Promise<any>;
    setInstanceInfo: (extraParams?: {
        version?: string;
        versionOrder?: string;
        isCurrentInstance?: boolean;
    }) => Promise<APP.instanceInfoType<string>>;
    setOptimizeInstanceInfo: (extraParams?: Parameters<typeof initInstance>[0]) => Promise<APP.instanceInfoType<string>>;
    clearInstance: () => Promise<void>;
    tabLoading: boolean;
    setTabCount: () => Promise<void>;
    setVersion: (value: string) => void;
    updateInstanceEditAuth: ({ instance }: {
        instance: APP.instanceInfoType;
    }) => Promise<any>;
    getInstanceEditAuth: ({ instance }: {
        instance: APP.instanceInfoType;
    }) => Promise<{
        updateInstanceVo: any;
        hasEditAuth: any;
        result: any;
    }>;
    judgeEditAuthLoading: Boolean;
    updateWorkflow: (workflowId: any) => Promise<void>;
    updateDateTableData: () => Promise<void>;
    updateProjectBudgetMethod: (id: string) => boolean | undefined;
    updateBasicAttrs: (extraParams?: {
        version: string;
        versionOrder: string;
    }) => Promise<void>;
    updateProject: (fn: (instance: APP.ProjectInstance) => APP.ProjectInstance) => boolean | undefined;
};
