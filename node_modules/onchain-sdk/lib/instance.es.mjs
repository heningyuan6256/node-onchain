var z = Object.defineProperty;
var J = (r, t, a) => t in r ? z(r, t, { enumerable: !0, configurable: !0, writable: !0, value: a }) : r[t] = a;
var c = (r, t, a) => (J(r, typeof t != "symbol" ? t + "" : t, a), a);
class L {
  constructor({ baseUrl: t, fetch: a, token: e, tenantId: s }) {
    c(this, "baseUrl");
    c(this, "token");
    c(this, "fetch");
    c(this, "tenantId");
    this.baseUrl = t, this.fetch = a, this.token = e, this.tenantId = s;
  }
}
class Z extends L {
  constructor(t) {
    super(t);
  }
  async getToken(t) {
    const a = new URL(`${this.baseUrl}/sys/user/login`);
    return await (await this.fetch(a, {
      method: "post",
      headers: {
        "Content-Type": "application/json"
        // 指定发送的数据类型为JSON
      },
      body: JSON.stringify(t)
    })).json();
  }
}
var i = /* @__PURE__ */ ((r) => (r.material = "10001001", r.document = "10001002", r.changeRequest = "10001003", r.changeInstruction = "10001004", r.engineeringChange = "10001005", r.file = "10001006", r.problemReport = "10001007", r.manufacturerChange = "10001008", r.statusChange = "10001009", r.applicationProcess = "10001010", r.supplierRequest = "10001011", r.manufacturer = "10001012", r.manufacturerParts = "10001013", r.supplier = "10001014", r.projectStartChange = "10001015", r.dailyNewspaper = "10001019", r.projectBaselineChange = "10001030", r.project = "10001016", r.workReport = "10001019", r.user = "10001017", r.userGroup = "10001018", r.manufactChange = "10001020", r.technology = "10001021", r.factory = "10001022", r.resource = "10001023", r.factoryPublish = "10001024", r.resourcePublish = "10001025", r.risk = "10001028", r.technologyPublish = "10001029", r.inspectItem = "10001031", r.option = "10001032", r))(i || {}), F = /* @__PURE__ */ ((r) => (r.BLANK = "0", r.PENDING = "1", r.ARCHIVED = "2", r))(F || {});
class n {
  /** 是否是物料 */
  static isMaterial(t) {
    return t == "10001001";
  }
  /** 是否是文档 */
  static isDocument(t) {
    return t == "10001002";
  }
  /** 是否是变更请求 */
  static isChangeRequest(t) {
    return t == "10001003";
  }
  /** 是否是变更指令 */
  static isChangeInstruction(t) {
    return t == "10001004";
  }
  /** 是否是工程变更 */
  static isEngineeringChange(t) {
    return t == "10001005";
  }
  /** 是否是文件 */
  static isFile(t) {
    return t == "10001006";
  }
  /** 是否是问题报告 */
  static isProblemReport(t) {
    return t == "10001007";
  }
  /** 是否是制造商变更 */
  static isManufacturerChange(t) {
    return t == "10001008";
  }
  /** 是否是状态变更 */
  static isStatusChange(t) {
    return t == "10001009";
  }
  /** 是否是申请流程 */
  static isApplicationProcess(t) {
    return t == "10001010";
  }
  /** 是否是供应商请求 */
  static isSupplierRequest(t) {
    return t == "10001011";
  }
  /** 是否是制造商 */
  static isManufacturer(t) {
    return t == "10001012";
  }
  /** 是否是制造商部件 */
  static isManufacturerParts(t) {
    return t == "10001013";
  }
  /** 是否是制造商变更 */
  static isManufactChange(t) {
    return t == "10001020";
  }
  /** 是否是供应商 */
  static isSupplier(t) {
    return t == "10001014";
  }
  /** 是否是项目启动变更 */
  static isProjectStartChange(t) {
    return t == "10001015";
  }
  /** 是否是日报 */
  static isDailyNewspaper(t) {
    return t == "10001019";
  }
  /** 是否是项目基线变更 */
  static isProjectBaselineChange(t) {
    return t == "10001030";
  }
  /** 是否是项目变更 */
  static isProjectChange(t) {
    return n.isProjectStartChange(t) || n.isProjectBaselineChange(t);
  }
  /** 是否是项目 */
  static isProject(t) {
    return t == "10001016";
  }
  /** 是否是工作报告 */
  static isWorkReport(t) {
    return t == "10001019";
  }
  /** 是否是用户 */
  static isUser(t) {
    return t == "10001017";
  }
  /** 是否是用户组 */
  static isUserGroup(t) {
    return t == "10001018";
  }
  /** 是否是工艺 */
  static isTechnology(t) {
    return t == "10001021";
  }
  /** 是否是工厂 */
  static isFactory(t) {
    return t == "10001022";
  }
  /** 是否是资源 */
  static isResource(t) {
    return t == "10001023";
  }
  /** 是否是工艺发布 */
  static isTechnologyPublish(t) {
    return t == "10001029";
  }
  /** 是否是工厂发布 */
  static isFactoryPublish(t) {
    return t == "10001024";
  }
  /** 是否是资源发布 */
  static isResoucePublish(t) {
    return t == "10001025";
  }
  /** 是否是风险 */
  static isRisk(t) {
    return t == "10001028";
  }
  /** 是否是检查项 */
  static isInspectItem(t) {
    return t == "10001031";
  }
  /** 是否是选项实例 */
  static isOption(t) {
    return t == "10001032";
  }
}
class H {
  /** 是否是物料 */
  static isMaterial(t) {
    return n.isMaterial(t.itemCode);
  }
  /** 是否是文件 */
  static isFile(t) {
    return n.isFile(t.itemCode);
  }
  /** 是否是项目 */
  static isProject(t) {
    return n.isProject(t.itemCode);
  }
}
const K = {
  [i.material]: ["Relationships"],
  [i.document]: ["Relationships"],
  [i.changeRequest]: ["Relationships", "Attachments"],
  [i.technology]: ["Relationships"],
  [i.factory]: ["Relationships"],
  [i.resource]: ["Relationships", "Attachments"],
  [i.changeInstruction]: ["Relationships", "Attachments"],
  [i.engineeringChange]: ["Relationships", "Attachments"],
  [i.file]: ["Relationships"],
  [i.problemReport]: ["Relationships", "Attachments"],
  [i.manufacturerChange]: ["Relationships", "Attachments"],
  [i.statusChange]: ["Relationships", "Attachments"],
  [i.applicationProcess]: ["Relationships", "Attachments"],
  [i.supplierRequest]: ["Relationships", "Attachments"],
  [i.manufacturer]: ["Relationships", "Suppliers", "MPN", "Attachments"],
  [i.supplier]: ["Relationships", "Manufacturers", "MPN", "Attachments"],
  [i.manufacturerParts]: ["Relationships", "Suppliers"],
  [i.manufactChange]: ["Relationships", "Attachments"],
  [i.factoryPublish]: ["Relationships", "Attachments"],
  [i.resourcePublish]: ["Relationships", "Attachments"],
  [i.technologyPublish]: ["Relationships", "Attachments"],
  [i.project]: ["WorkReport", "Relationships", "Attachments", "TagetDeliveryLists", "DeliveryLists"]
};
class $ extends L {
  constructor(a) {
    super(a);
    /**
     * 实例的属性阅读权限
     */
    c(this, "basicReadInstanceInfo");
    /**
     * 实例的属性修改权限
     */
    c(this, "basicUpdateInstanceInfo");
    /**实例的基本属性列表 */
    c(this, "BasicAttrs");
    /**实例的修改权限 */
    c(this, "hasEditAuth");
    this.basicReadInstanceInfo, this.basicUpdateInstanceInfo, this.BasicAttrs, this.hasEditAuth;
  }
  /**修改实例的基本属性 */
  static updateBasicInstanceByAttId({
    value: a,
    instanceInfo: e,
    apicode: s,
    BasicAttrs: u
  }) {
    const h = (u || []).map((o) => s === o.apicode ? {
      ...o,
      value: a
    } : o);
    return {
      id: e == null ? void 0 : e.insId,
      itemCode: e == null ? void 0 : e.itemCode,
      tabCode: "10002001",
      insAttrs: h
    };
  }
  static getEditAndControlledState(a, e) {
    var C;
    const s = a.topInstanceInfo, { tabInfo: u, isJudgeVersion: h = !0, isVersionOrderManager: d, isPreview: o } = a, b = u.tab === "WorkReport", m = u.tab === "DeliveryLists", R = e.insVersion && e.insVersion != "Draft" && !CHANGE_ITEMCODE.includes(Number(e.itemCode)), A = !(K[e == null ? void 0 : e.itemCode] || []).includes(u.tab), W = "签出状态不能修改缴费清单和工作报告", _ = "没有权限", w = `流程已发布，无法编辑${u.tabName || ""}`, y = `流程已取消，无法编辑${u.tabName || ""}`, q = `${e.itemName || ""}未签出，无法编辑${u.tabName || ""}`, P = `${e.itemName || ""}正在流程中，无法编辑${u.tabName || ""}`, G = "请切换最新的版次修改";
    let l = {
      data: "",
      type: "warning"
    };
    const k = (() => {
      var f, E, j, D, U, O, S, N, v, M, V, T;
      if (a.isChange || a.isAnalyse || a.isChangeDisposal)
        return n.isFile(e.itemCode) || d ? ((f = s == null ? void 0 : s.workflowInstance) != null && f.is_publish ? l.data = w : (E = s == null ? void 0 : s.workflowInstance) != null && E.is_cancel ? l.data = y : e.checkout || (l.data = q), !e.checkout || ((j = s == null ? void 0 : s.workflowInstance) == null ? void 0 : j.is_publish) || ((D = s == null ? void 0 : s.workflowInstance) == null ? void 0 : D.is_cancel)) : ((U = s == null ? void 0 : s.workflowInstance) != null && U.is_publish ? l.data = w : (O = s == null ? void 0 : s.workflowInstance) != null && O.is_cancel && (l.data = y), ((S = s == null ? void 0 : s.workflowInstance) == null ? void 0 : S.is_publish) || ((N = s == null ? void 0 : s.workflowInstance) == null ? void 0 : N.is_cancel));
      {
        let g = (e == null ? void 0 : e.inChangeOrderWorkflow) || ((v = e == null ? void 0 : e.workflowInstance) == null ? void 0 : v.is_publish);
        return a.topInstanceInfo && n.isStatusChange((M = a.topInstanceInfo) == null ? void 0 : M.itemCode) && ["AffectParts", "AffectDocuments", "AffectFiles"].includes(String((V = a.topTabInfo) == null ? void 0 : V.tab)) && (g = !!(e.affectedIn ? e.affectedIn.split(",") : []).filter((x) => x != "SCO").length), h ? ((R || g) && (e != null && e.inChangeOrderWorkflow ? l.data = P : ((T = e == null ? void 0 : e.workflowInstance) != null && T.is_publish || R) && (l.data = w)), d || n.isFile(e.itemCode) ? (e != null && e.checkout && (e != null && e.versionOrders) && e.currentVersionOrder == (e == null ? void 0 : e.versionOrders[e.versionOrders.length - 1]) || (l.data = G), (g || R) && !(e != null && e.checkout && (e != null && e.versionOrders) && e.currentVersionOrder == (e == null ? void 0 : e.versionOrders[e.versionOrders.length - 1]))) : g || R) : (g && (l.data = P), g);
      }
    })();
    let p = k && A;
    return e.archivingStatus == F.ARCHIVED && ["Attachments"].includes(String((C = a == null ? void 0 : a.topTabInfo) == null ? void 0 : C.tab)) && (p = !0), H.isProject(e) && (e.projectStatusExample.isFrozen ? (p = !0, l.data = _) : e && e.checkout && !e.inChangeOrderWorkflow ? ((b || m) && (l.data = W), p = b || m) : p = p), n.isMaterial(e.itemCode) && u.tab === "BOMReplace" && (p = !1), o && (p = !0, l.data = `预览中，无法编辑${u.tabName || ""}`), {
      /** 是否是 非草稿状态 */
      notDraftVersion: R,
      /** 不能编辑 */
      uneditable: k,
      /** 是否是受控 tab */
      isControlled: A,
      /** 禁止编辑状态 */
      state: p,
      /** 错误原因提示消息 */
      messageData: l
    };
  }
  /**
   * 初始化实例
   */
  initInstance() {
  }
  /**
   * 获取实例的读取基本属性
   * basicReadInstanceInfo
   *
   */
  async getReadBasicInstanceInfo({ instanceId: a, userId: e }) {
    const {
      result: { pdmAttributeCustomizedVoList: s, readInstanceVo: u }
    } = await this.getInstanceInfo({ instanceId: a, tabCode: "10002001", authType: "read", userId: e });
    this.basicReadInstanceInfo = u, this.BasicAttrs = s;
  }
  /**
   * 获取实例的修改基本属性
   */
  async getUpdateBasicInstanceInfo({ instanceId: a, userId: e }) {
    const {
      result: { updateInstanceVo: s, hasEditAuth: u }
    } = await this.getInstanceInfo({ instanceId: a, tabCode: "10002001", authType: "update", userId: e });
    this.basicUpdateInstanceInfo = s, this.hasEditAuth = u;
  }
  /**
   * 获取实例
   * return 实例的基本属性
   */
  async getInstanceInfo({ instanceId: a, tabCode: e, authType: s, version: u = "", versionOrder: h = "", userId: d }) {
    const o = new URL(`${this.baseUrl}/opendata/instance`);
    return o.search = new URLSearchParams({
      instanceId: a,
      authType: s,
      tabCode: e,
      tenantId: this.tenantId,
      version: u,
      versionOrder: h,
      userId: d
    }).toString(), await (await this.fetch(o, {
      method: "get",
      headers: {
        // 指定发送的数据类型为JSON
        "Content-Type": "application/json",
        // token
        Authorization: this.token
      }
    })).json();
  }
  /**
   * 修改实例信息
   */
  async updateInstanceInfo({ apicode: a, value: e }) {
    if (!this.basicReadInstanceInfo)
      throw new Error("清先初始化实例");
    const s = $.updateBasicInstanceByAttId({
      value: e,
      instanceInfo: this.basicReadInstanceInfo,
      apicode: a,
      BasicAttrs: this.BasicAttrs
    }), u = new URL(`${this.baseUrl}/pdm/instance`);
    return await (await this.fetch(u, {
      method: "PUT",
      headers: {
        // 指定发送的数据类型为JSON
        "Content-Type": "application/json",
        // token
        Authorization: this.token
      },
      body: JSON.stringify({
        ...s
      })
    })).json();
  }
  /**
   * 判断实例能否有编辑权限
   */
  // async judgePrivillige({ instanceInfo, apicode, BasicAttrs, value }: any) {
  //   InstanceUtils.getEditAndControlledState({}, instanceInfo)
  //   return updateResult;
  // }
  /**
   * 处理实例的版本
   */
  async getInstanceVersion({ instanceId: a }) {
    const e = await this.fetch(this.baseUrl + "/pdm/ins/versions").then((b) => b.json()), {
      result: {
        [a]: { versions: s, orderVersionMap: u, orders: h, orderPreVersionMap: d, versionOrderMap: o }
      }
    } = await e.json();
    return {
      /**版本列表 */
      versions: s,
      orderVersionMap: u,
      versionOrders: h,
      orderPreVersionMap: d,
      versionOrderMap: o
    };
  }
  /**
   * 判断页签是否可以编辑
   */
  getCommonButtonStatus({
    topInstanceInfo: a,
    tabInfo: e,
    instanceInfo: s,
    topTabInfo: u,
    isChange: h
  }) {
  }
}
export {
  Z as CommonUtils,
  $ as InstanceUtils
};
